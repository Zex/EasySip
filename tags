!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	test/ts-shareptr.cpp	/^	A(int n) : n_(n)$/;"	f	class:A
A	test/ts-shareptr.cpp	/^class A$/;"	c	file:
A	test/ts.cpp	/^	A()$/;"	f	class:A
A	test/ts.cpp	/^	A(A &a)$/;"	f	class:A
A	test/ts.cpp	/^	A(unsigned int val)$/;"	f	class:A
A	test/ts.cpp	/^class A$/;"	c	file:
AcceptRange	include/header_field.h	/^			AcceptRange()$/;"	f	struct:EasySip::HFAccept::AcceptRange
AcceptRange	include/header_field.h	/^			AcceptRange(std::string type, std::string subtype)$/;"	f	struct:EasySip::HFAccept::AcceptRange
AcceptRange	include/header_field.h	/^		struct AcceptRange$/;"	s	struct:EasySip::HFAccept
AckMessage	include/message.h	/^		AckMessage() : RequestMessage()$/;"	f	class:EasySip::AckMessage
AckMessage	include/message.h	/^		AckMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::AckMessage
AckMessage	include/message.h	/^		AckMessage(std::string &in_msg)$/;"	f	class:EasySip::AckMessage
AckMessage	include/message.h	/^	class AckMessage : public RequestMessage$/;"	c	namespace:EasySip
AddSupportedMethods	test/ts-osip.c	/^int AddSupportedMethods(osip_message_t *msgPtr)$/;"	f
Addr	include/socket.h	/^		std::string Addr()$/;"	f	class:EasySip::SocketIp4
Addr	include/socket.h	/^		void Addr(std::string addr)$/;"	f	class:EasySip::SocketIp4
Ancestor	include/message.h	/^		typedef Message Ancestor;$/;"	t	class:EasySip::Message
B	test/ts.cpp	/^	B(unsigned int val)$/;"	f	class:B
B	test/ts.cpp	/^class B : public A$/;"	c	file:
BUILD	makefiles/predef.mk	/^BUILD			= $(PROJECT_DIR)\/build$/;"	m
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::T1_Rtt
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::T2_MAX_RETRAN_INTV
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::T4_MAX_DURATION_OF_MSG
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TA_INVITE_RETRAN_INTERVAL
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TB_INVITE_TIMEOUT
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TC_PROXY_INVITE_TIMEOUT
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TD_WAIT_FOR_RETRAN
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TE_NON_INVITE_RETRAN_INTV
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TF_NON_INVITE_REQS_TIMEOUT
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TG_INVITE_RESP_RETRAN_INTV
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TH_WAIT_FOR_ACK_RECEIPT
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TI_WAIT_FOR_ACK_RETRAN
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN
Base	include/timer.h	/^		typedef Timer Base;$/;"	t	class:EasySip::TK_WAIT_FOR_RESP_RETRAN
Bind	include/socket.h	/^		bool Bind()$/;"	f	class:EasySip::SocketIp4UDP
Bind	include/socket.h	/^		void Bind(bool b)$/;"	f	class:EasySip::SocketIp4UDP
ByeMessage	include/message.h	/^		ByeMessage() : RequestMessage()$/;"	f	class:EasySip::ByeMessage
ByeMessage	include/message.h	/^		ByeMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::ByeMessage
ByeMessage	include/message.h	/^		ByeMessage(std::string &in_msg)$/;"	f	class:EasySip::ByeMessage
ByeMessage	include/message.h	/^	class ByeMessage : public RequestMessage$/;"	c	namespace:EasySip
CASE_ALPHA	include/uri.h	70;"	d
CASE_ALPHA_NUM	include/uri.h	86;"	d
CASE_DIGIT	include/uri.h	74;"	d
CASE_LOWER_ALPHA	include/uri.h	42;"	d
CASE_TOKEN	include/uri.h	90;"	d
CASE_UPPER_ALPHA	include/uri.h	15;"	d
CASE_WORD	include/uri.h	102;"	d
CC	makefiles/predef.mk	/^CC		= gcc$/;"	m
CXX	makefiles/predef.mk	/^CXX		= g++$/;"	m
CancelMessage	include/message.h	/^		CancelMessage() : RequestMessage()$/;"	f	class:EasySip::CancelMessage
CancelMessage	include/message.h	/^		CancelMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::CancelMessage
CancelMessage	include/message.h	/^		CancelMessage(std::string &in_msg)$/;"	f	class:EasySip::CancelMessage
CancelMessage	include/message.h	/^	class CancelMessage : public RequestMessage$/;"	c	namespace:EasySip
Code	include/parameter.h	/^		int Code() const$/;"	f	class:EasySip::CodeMap
Code	include/parameter.h	/^		void Code(int c)$/;"	f	class:EasySip::CodeMap
CodeMap	include/parameter.h	/^		CodeMap()$/;"	f	class:EasySip::CodeMap
CodeMap	include/parameter.h	/^		CodeMap(int c)$/;"	f	class:EasySip::CodeMap
CodeMap	include/parameter.h	/^		CodeMap(int c, std::string n)$/;"	f	class:EasySip::CodeMap
CodeMap	include/parameter.h	/^		CodeMap(std::string n)$/;"	f	class:EasySip::CodeMap
CodeMap	include/parameter.h	/^	class CodeMap : public std::pair<int, std::string>$/;"	c	namespace:EasySip
CodeStr	include/parameter.h	/^		std::string CodeStr() const$/;"	f	class:EasySip::CodeMap
Compact	include/header_field.h	/^		std::string Compact()$/;"	f	struct:EasySip::HeaderField
Contact	include/uri.h	/^		Contact()$/;"	f	class:EasySip::Contact
Contact	include/uri.h	/^		Contact(std::string name, std::string uri)$/;"	f	class:EasySip::Contact
Contact	include/uri.h	/^	class Contact : public ItemWithParams$/;"	c	namespace:EasySip
ContactList	include/uri.h	/^	struct ContactList : public std::vector<Contact>$/;"	s	namespace:EasySip
DESCRIPTION	Makefile	/^DESCRIPTION	= Easy-to-used SIP Stack$/;"	m
DESCRIPTION	build/version.h	5;"	d
DESCRIPTION	test/Makefile	/^DESCRIPTION	= Easy-to-used SIP Stack$/;"	m
EXPIRES_TIME_INSECS	test/ts-osip.c	13;"	d	file:
EasySip	include/Method/method.h	/^namespace EasySip$/;"	n
EasySip	include/Method/proxy.h	/^namespace EasySip$/;"	n
EasySip	include/Method/registar.h	/^namespace EasySip$/;"	n
EasySip	include/Method/uaclient.h	/^namespace EasySip$/;"	n
EasySip	include/Method/uaserver.h	/^namespace EasySip$/;"	n
EasySip	include/dialog.h	/^namespace EasySip$/;"	n
EasySip	include/except.h	/^namespace EasySip$/;"	n
EasySip	include/header_field.h	/^namespace EasySip$/;"	n
EasySip	include/message.h	/^namespace EasySip$/;"	n
EasySip	include/parameter.h	/^namespace EasySip$/;"	n
EasySip	include/request_message.h	/^namespace EasySip$/;"	n
EasySip	include/response_code.h	/^namespace EasySip$/;"	n
EasySip	include/socket.h	/^namespace EasySip$/;"	n
EasySip	include/thread.h	/^namespace EasySip$/;"	n
EasySip	include/timer.h	/^namespace EasySip$/;"	n
EasySip	include/uri.h	/^namespace EasySip$/;"	n
EasySip	src/Method/method.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/Method/proxy.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/Method/registar.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/Method/uaclient.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/Method/uaserver.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/except.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/header_field.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/message.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/socket.cpp	/^namespace EasySip$/;"	n	file:
EasySip	src/thread.cpp	/^namespace EasySip$/;"	n	file:
Except	include/except.h	/^		Except()$/;"	f	class:EasySip::Except
Except	include/except.h	/^		Except(std::string msg)$/;"	f	class:EasySip::Except
Except	include/except.h	/^	class Except : std::exception$/;"	c	namespace:EasySip
Field	include/header_field.h	/^		std::string Field()$/;"	f	struct:EasySip::HeaderField
HFAccept	include/header_field.h	/^		HFAccept() : HeaderField("Accept") \/\/ type\/sub-type$/;"	f	struct:EasySip::HFAccept
HFAccept	include/header_field.h	/^	struct HFAccept : public HeaderField$/;"	s	namespace:EasySip
HFAcceptContact	include/header_field.h	/^		HFAcceptContact() : HeaderField("Accept-Contact", "a")$/;"	f	struct:EasySip::HFAcceptContact
HFAcceptContact	include/header_field.h	/^	struct HFAcceptContact : public HeaderField$/;"	s	namespace:EasySip
HFAcceptEncoding	include/header_field.h	/^		HFAcceptEncoding() : HeaderField("Accept-Encoding")$/;"	f	struct:EasySip::HFAcceptEncoding
HFAcceptEncoding	include/header_field.h	/^	struct HFAcceptEncoding : public HeaderField$/;"	s	namespace:EasySip
HFAcceptLanguage	include/header_field.h	/^		HFAcceptLanguage() : HFBase_1_("Accept-Language")$/;"	f	struct:EasySip::HFAcceptLanguage
HFAcceptLanguage	include/header_field.h	/^	struct HFAcceptLanguage : public HFBase_1_\/\/HeaderField$/;"	s	namespace:EasySip
HFAlertInfo	include/header_field.h	/^		HFAlertInfo() : HeaderField("Alert-Info", true)$/;"	f	struct:EasySip::HFAlertInfo
HFAlertInfo	include/header_field.h	/^	struct HFAlertInfo : public HeaderField$/;"	s	namespace:EasySip
HFAllow	include/header_field.h	/^		HFAllow() : HFBase_3_("Allow")$/;"	f	struct:EasySip::HFAllow
HFAllow	include/header_field.h	/^	struct HFAllow : public HFBase_3_$/;"	s	namespace:EasySip
HFAllowEvents	include/header_field.h	/^		HFAllowEvents() : HeaderField("Allow-Events", "u")$/;"	f	struct:EasySip::HFAllowEvents
HFAllowEvents	include/header_field.h	/^	struct HFAllowEvents : public HeaderField$/;"	s	namespace:EasySip
HFAnswerMode	include/header_field.h	/^		HFAnswerMode() : HeaderField("Answer-Mode")$/;"	f	struct:EasySip::HFAnswerMode
HFAnswerMode	include/header_field.h	/^	struct HFAnswerMode : public HeaderField$/;"	s	namespace:EasySip
HFAuthenticationInfo	include/header_field.h	/^	struct HFAuthenticationInfo : public HeaderField$/;"	s	namespace:EasySip
HFAuthenticationInfo	src/header_field.cpp	/^	HFAuthenticationInfo::HFAuthenticationInfo() : HeaderField("Authentication-Info")$/;"	f	class:EasySip::HFAuthenticationInfo
HFAuthorization	include/header_field.h	/^	struct HFAuthorization : public HeaderField$/;"	s	namespace:EasySip
HFAuthorization	src/header_field.cpp	/^	HFAuthorization::HFAuthorization() : HeaderField("Authorization")$/;"	f	class:EasySip::HFAuthorization
HFBase_1_	include/header_field.h	/^		HFBase_1_(std::string f, bool is_hbh = false) : HeaderField(f, is_hbh)$/;"	f	struct:EasySip::HFBase_1_
HFBase_1_	include/header_field.h	/^		HFBase_1_(std::string f, std::string c, bool is_hbh = false) : HeaderField(f, c, is_hbh)$/;"	f	struct:EasySip::HFBase_1_
HFBase_1_	include/header_field.h	/^	struct HFBase_1_ : public HeaderField$/;"	s	namespace:EasySip
HFBase_2_	include/header_field.h	/^		HFBase_2_(std::string f, bool is_hbh = false) : HeaderField(f, is_hbh)$/;"	f	struct:EasySip::HFBase_2_
HFBase_2_	include/header_field.h	/^		HFBase_2_(std::string f, std::string c, bool is_hbh = false) : HeaderField(f, c, is_hbh)$/;"	f	struct:EasySip::HFBase_2_
HFBase_2_	include/header_field.h	/^	struct HFBase_2_ : public HeaderField$/;"	s	namespace:EasySip
HFBase_3_	include/header_field.h	/^		HFBase_3_(std::string f, bool is_hbh = false) : HeaderField(f, is_hbh)$/;"	f	struct:EasySip::HFBase_3_
HFBase_3_	include/header_field.h	/^		HFBase_3_(std::string f, std::string c, bool is_hbh = false) : HeaderField(f, c, is_hbh)$/;"	f	struct:EasySip::HFBase_3_
HFBase_3_	include/header_field.h	/^	struct HFBase_3_ : public HeaderField$/;"	s	namespace:EasySip
HFCSeq	include/header_field.h	/^		HFCSeq() : HeaderField("CSeq")$/;"	f	struct:EasySip::HFCSeq
HFCSeq	include/header_field.h	/^	struct HFCSeq : public HeaderField$/;"	s	namespace:EasySip
HFCallId	include/header_field.h	/^		HFCallId() : HeaderField("Call-ID", "i")$/;"	f	struct:EasySip::HFCallId
HFCallId	include/header_field.h	/^	struct HFCallId : public HeaderField$/;"	s	namespace:EasySip
HFCallInfo	include/header_field.h	/^	struct HFCallInfo : public HFBase_1_\/\/eaderField$/;"	s	namespace:EasySip
HFCallInfo	src/header_field.cpp	/^	HFCallInfo::HFCallInfo() : HFBase_1_("Call-Info", true)$/;"	f	class:EasySip::HFCallInfo
HFContact	include/header_field.h	/^	struct HFContact : public HFBase_1_\/\/HeaderField$/;"	s	namespace:EasySip
HFContact	src/header_field.cpp	/^	HFContact::HFContact() : HFBase_1_("Contact", "m")$/;"	f	class:EasySip::HFContact
HFContentEncoding	include/header_field.h	/^		HFContentEncoding() : HeaderField("Content-Encoding", "e")$/;"	f	struct:EasySip::HFContentEncoding
HFContentEncoding	include/header_field.h	/^	struct HFContentEncoding : public HeaderField$/;"	s	namespace:EasySip
HFContentLanguage	include/header_field.h	/^		HFContentLanguage() : HeaderField("Content-Language")$/;"	f	struct:EasySip::HFContentLanguage
HFContentLanguage	include/header_field.h	/^	struct HFContentLanguage : public HeaderField$/;"	s	namespace:EasySip
HFContentLength	include/header_field.h	/^		HFContentLength() : HFBase_2_("Content-Length", "l", true)$/;"	f	struct:EasySip::HFContentLength
HFContentLength	include/header_field.h	/^	struct HFContentLength : public HFBase_2_$/;"	s	namespace:EasySip
HFContentType	include/header_field.h	/^		HFContentType() : HeaderField("Content-Type", "c")$/;"	f	struct:EasySip::HFContentType
HFContentType	include/header_field.h	/^	struct HFContentType : public HeaderField$/;"	s	namespace:EasySip
HFDate	include/header_field.h	/^		HFDate() : HeaderField("Date", true)$/;"	f	struct:EasySip::HFDate
HFDate	include/header_field.h	/^	struct HFDate : public HeaderField$/;"	s	namespace:EasySip
HFErrorInfo	include/header_field.h	/^		HFErrorInfo() : HeaderField("Error-Info", true)$/;"	f	struct:EasySip::HFErrorInfo
HFErrorInfo	include/header_field.h	/^	struct HFErrorInfo : public HeaderField$/;"	s	namespace:EasySip
HFEvent	include/header_field.h	/^	struct HFEvent : public HeaderField$/;"	s	namespace:EasySip
HFEvent	src/header_field.cpp	/^	HFEvent::HFEvent() : HeaderField("Event", "o")$/;"	f	class:EasySip::HFEvent
HFExpires	include/header_field.h	/^		HFExpires() : HFBase_2_("Expires")$/;"	f	struct:EasySip::HFExpires
HFExpires	include/header_field.h	/^	struct HFExpires : public HFBase_2_$/;"	s	namespace:EasySip
HFFrom	include/header_field.h	/^		HFFrom() : HFBase_1_("From", "f")$/;"	f	struct:EasySip::HFFrom
HFFrom	include/header_field.h	/^	struct HFFrom : public HFBase_1_$/;"	s	namespace:EasySip
HFInReplyTo	include/header_field.h	/^		HFInReplyTo() : HeaderField("In-Reply-To")$/;"	f	struct:EasySip::HFInReplyTo
HFInReplyTo	include/header_field.h	/^	struct HFInReplyTo : public HeaderField$/;"	s	namespace:EasySip
HFJoin	include/header_field.h	/^		HFJoin() : HeaderField("Join")$/;"	f	struct:EasySip::HFJoin
HFJoin	include/header_field.h	/^	struct HFJoin : public HeaderField$/;"	s	namespace:EasySip
HFMIMEVersion	include/header_field.h	/^		HFMIMEVersion() : HeaderField("MIME-Version")$/;"	f	struct:EasySip::HFMIMEVersion
HFMIMEVersion	include/header_field.h	/^	struct HFMIMEVersion : public HeaderField$/;"	s	namespace:EasySip
HFMaxForwards	include/header_field.h	/^		HFMaxForwards() : HFBase_2_("Max-Forwards", true)$/;"	f	struct:EasySip::HFMaxForwards
HFMaxForwards	include/header_field.h	/^	struct HFMaxForwards : public HFBase_2_$/;"	s	namespace:EasySip
HFMinExpires	include/header_field.h	/^		HFMinExpires() : HFBase_2_("Min-Expires")$/;"	f	struct:EasySip::HFMinExpires
HFMinExpires	include/header_field.h	/^	struct HFMinExpires : public HFBase_2_$/;"	s	namespace:EasySip
HFMinSE	include/header_field.h	/^		HFMinSE() : HeaderField("Min-SE")$/;"	f	struct:EasySip::HFMinSE
HFMinSE	include/header_field.h	/^	struct HFMinSE : public HeaderField$/;"	s	namespace:EasySip
HFOrganization	include/header_field.h	/^		HFOrganization() : HeaderField("Organization", true)$/;"	f	struct:EasySip::HFOrganization
HFOrganization	include/header_field.h	/^	struct HFOrganization : public HeaderField$/;"	s	namespace:EasySip
HFPAssertedIdentity	include/header_field.h	/^		HFPAssertedIdentity() : HeaderField("P-Asserted-Identity")$/;"	f	struct:EasySip::HFPAssertedIdentity
HFPAssertedIdentity	include/header_field.h	/^	struct HFPAssertedIdentity : public HeaderField$/;"	s	namespace:EasySip
HFPOSPAuthToken	include/header_field.h	/^		HFPOSPAuthToken() : HeaderField("P-OSP-Auth-Token")$/;"	f	struct:EasySip::HFPOSPAuthToken
HFPOSPAuthToken	include/header_field.h	/^	struct HFPOSPAuthToken : public HeaderField$/;"	s	namespace:EasySip
HFPPreferredIdentity	include/header_field.h	/^		HFPPreferredIdentity() : HeaderField("P-Preferred-Identity")$/;"	f	struct:EasySip::HFPPreferredIdentity
HFPPreferredIdentity	include/header_field.h	/^	struct HFPPreferredIdentity : public HeaderField$/;"	s	namespace:EasySip
HFPriority	include/header_field.h	/^		HFPriority() : HeaderField("Priority", true)$/;"	f	struct:EasySip::HFPriority
HFPriority	include/header_field.h	/^	struct HFPriority : public HeaderField$/;"	s	namespace:EasySip
HFPrivAnswerMode	include/header_field.h	/^		HFPrivAnswerMode() : HeaderField("Priv-Answer-Mode")$/;"	f	struct:EasySip::HFPrivAnswerMode
HFPrivAnswerMode	include/header_field.h	/^	struct HFPrivAnswerMode : public HeaderField$/;"	s	namespace:EasySip
HFPrivacy	include/header_field.h	/^		HFPrivacy() : HeaderField("Privacy", true)$/;"	f	struct:EasySip::HFPrivacy
HFPrivacy	include/header_field.h	/^	struct HFPrivacy : public HeaderField$/;"	s	namespace:EasySip
HFProxyAuthenticate	include/header_field.h	/^	struct HFProxyAuthenticate : public HeaderField$/;"	s	namespace:EasySip
HFProxyAuthenticate	src/header_field.cpp	/^	HFProxyAuthenticate::HFProxyAuthenticate() : HeaderField("Proxy-Authenticate", true)$/;"	f	class:EasySip::HFProxyAuthenticate
HFProxyAuthorization	include/header_field.h	/^	struct HFProxyAuthorization : public HeaderField$/;"	s	namespace:EasySip
HFProxyAuthorization	src/header_field.cpp	/^	HFProxyAuthorization::HFProxyAuthorization() : HeaderField("Proxy-Authorization", true)$/;"	f	class:EasySip::HFProxyAuthorization
HFProxyRequire	include/header_field.h	/^		HFProxyRequire() : HFBase_3_("Proxy-Require", true)$/;"	f	struct:EasySip::HFProxyRequire
HFProxyRequire	include/header_field.h	/^	struct HFProxyRequire : public HFBase_3_$/;"	s	namespace:EasySip
HFRSeq	include/header_field.h	/^		HFRSeq() : HeaderField("RSeq")$/;"	f	struct:EasySip::HFRSeq
HFRSeq	include/header_field.h	/^	struct HFRSeq : public HeaderField$/;"	s	namespace:EasySip
HFRack	include/header_field.h	/^		HFRack() : HeaderField("RACK")$/;"	f	struct:EasySip::HFRack
HFRack	include/header_field.h	/^	struct HFRack : public HeaderField$/;"	s	namespace:EasySip
HFReason	include/header_field.h	/^		HFReason() : HeaderField("Reason", true)$/;"	f	struct:EasySip::HFReason
HFReason	include/header_field.h	/^	struct HFReason : public HeaderField$/;"	s	namespace:EasySip
HFRecordRoute	include/header_field.h	/^		HFRecordRoute() : HeaderField("Record-Route", true)$/;"	f	struct:EasySip::HFRecordRoute
HFRecordRoute	include/header_field.h	/^	struct HFRecordRoute : public HeaderField$/;"	s	namespace:EasySip
HFReferTo	include/header_field.h	/^		HFReferTo() : HeaderField("Refer-To", "r")$/;"	f	struct:EasySip::HFReferTo
HFReferTo	include/header_field.h	/^	struct HFReferTo : public HeaderField$/;"	s	namespace:EasySip
HFReferredBy	include/header_field.h	/^		HFReferredBy() : HeaderField("Referred-By", "b")$/;"	f	struct:EasySip::HFReferredBy
HFReferredBy	include/header_field.h	/^	struct HFReferredBy : public HeaderField$/;"	s	namespace:EasySip
HFRejectContact	include/header_field.h	/^		HFRejectContact() : HeaderField("Reject-Contact", "j")$/;"	f	struct:EasySip::HFRejectContact
HFRejectContact	include/header_field.h	/^	struct HFRejectContact : public HeaderField$/;"	s	namespace:EasySip
HFReplaces	include/header_field.h	/^		HFReplaces() : HeaderField("Replaces")$/;"	f	struct:EasySip::HFReplaces
HFReplaces	include/header_field.h	/^	struct HFReplaces : public HeaderField$/;"	s	namespace:EasySip
HFReplyTo	include/header_field.h	/^		HFReplyTo() : HeaderField("Replay-To")$/;"	f	struct:EasySip::HFReplyTo
HFReplyTo	include/header_field.h	/^	struct HFReplyTo : public HeaderField$/;"	s	namespace:EasySip
HFRequestDisposition	include/header_field.h	/^		HFRequestDisposition() : HeaderField("Request-Disposition")$/;"	f	struct:EasySip::HFRequestDisposition
HFRequestDisposition	include/header_field.h	/^	struct HFRequestDisposition : public HeaderField$/;"	s	namespace:EasySip
HFRequire	include/header_field.h	/^		HFRequire() : HFBase_3_("Require", true)$/;"	f	struct:EasySip::HFRequire
HFRequire	include/header_field.h	/^	struct HFRequire : public HFBase_3_$/;"	s	namespace:EasySip
HFRetryAfter	include/header_field.h	/^		HFRetryAfter() : HeaderField("Retry-After")$/;"	f	struct:EasySip::HFRetryAfter
HFRetryAfter	include/header_field.h	/^	struct HFRetryAfter : public HeaderField$/;"	s	namespace:EasySip
HFRoute	include/header_field.h	/^		HFRoute() : HeaderField("Route", true)$/;"	f	struct:EasySip::HFRoute
HFRoute	include/header_field.h	/^	struct HFRoute : public HeaderField$/;"	s	namespace:EasySip
HFServer	include/header_field.h	/^		HFServer() : HFBase_3_("Server")$/;"	f	struct:EasySip::HFServer
HFServer	include/header_field.h	/^	struct HFServer : public HFBase_3_$/;"	s	namespace:EasySip
HFSessionExpires	include/header_field.h	/^		HFSessionExpires() : HeaderField("Session-Expires", "x")$/;"	f	struct:EasySip::HFSessionExpires
HFSessionExpires	include/header_field.h	/^	struct HFSessionExpires : public HeaderField$/;"	s	namespace:EasySip
HFSubject	include/header_field.h	/^		HFSubject() : HFBase_3_("Subject", "s")$/;"	f	struct:EasySip::HFSubject
HFSubject	include/header_field.h	/^	struct HFSubject : public HFBase_3_$/;"	s	namespace:EasySip
HFSubscriptionState	include/header_field.h	/^	struct HFSubscriptionState : public HeaderField$/;"	s	namespace:EasySip
HFSubscriptionState	src/header_field.cpp	/^	HFSubscriptionState::HFSubscriptionState() : HeaderField("Subscription-State")$/;"	f	class:EasySip::HFSubscriptionState
HFSupported	include/header_field.h	/^		HFSupported() : HFBase_3_("Supported", "k")$/;"	f	struct:EasySip::HFSupported
HFSupported	include/header_field.h	/^	struct HFSupported : public HFBase_3_$/;"	s	namespace:EasySip
HFTimestamp	include/header_field.h	/^		HFTimestamp() : HeaderField("Timestamp")$/;"	f	struct:EasySip::HFTimestamp
HFTimestamp	include/header_field.h	/^	struct HFTimestamp : public HeaderField$/;"	s	namespace:EasySip
HFTo	include/header_field.h	/^		HFTo() : HFBase_1_("To", "t")$/;"	f	struct:EasySip::HFTo
HFTo	include/header_field.h	/^	struct HFTo : public HFBase_1_$/;"	s	namespace:EasySip
HFUnsupported	include/header_field.h	/^		HFUnsupported() : HeaderField("Unsupported")$/;"	f	struct:EasySip::HFUnsupported
HFUnsupported	include/header_field.h	/^	struct HFUnsupported : public HeaderField$/;"	s	namespace:EasySip
HFUserAgent	include/header_field.h	/^		HFUserAgent() : HeaderField("User-Agent")$/;"	f	struct:EasySip::HFUserAgent
HFUserAgent	include/header_field.h	/^	struct HFUserAgent : public HeaderField$/;"	s	namespace:EasySip
HFVia	include/header_field.h	/^	struct HFVia : public HeaderField$/;"	s	namespace:EasySip
HFVia	src/header_field.cpp	/^	HFVia::HFVia() : HeaderField("Via", "v", true)$/;"	f	class:EasySip::HFVia
HFWWWAuthenticate	include/header_field.h	/^	struct HFWWWAuthenticate : public HeaderField$/;"	s	namespace:EasySip
HFWWWAuthenticate	src/header_field.cpp	/^	HFWWWAuthenticate::HFWWWAuthenticate() : HeaderField("WWW-Authenticate", true)$/;"	f	class:EasySip::HFWWWAuthenticate
HFWarning	include/header_field.h	/^		HFWarning() : HeaderField("Warning")$/;"	f	struct:EasySip::HFWarning
HFWarning	include/header_field.h	/^	struct HFWarning : public HeaderField$/;"	s	namespace:EasySip
HF_ACCEPT	include/header_field.h	/^		HF_ACCEPT,$/;"	e	enum:EasySip::__anon1
HF_ACCEPT_CONTACT	include/header_field.h	/^		HF_ACCEPT_CONTACT,$/;"	e	enum:EasySip::__anon1
HF_ACCEPT_ENCODING	include/header_field.h	/^		HF_ACCEPT_ENCODING,$/;"	e	enum:EasySip::__anon1
HF_ACCEPT_LANGUAGE	include/header_field.h	/^		HF_ACCEPT_LANGUAGE,$/;"	e	enum:EasySip::__anon1
HF_ALERT_INFO	include/header_field.h	/^		HF_ALERT_INFO,$/;"	e	enum:EasySip::__anon1
HF_ALLOW	include/header_field.h	/^		HF_ALLOW,$/;"	e	enum:EasySip::__anon1
HF_ALLOW_EVENTS	include/header_field.h	/^		HF_ALLOW_EVENTS,$/;"	e	enum:EasySip::__anon1
HF_ANSWER_MODE	include/header_field.h	/^		HF_ANSWER_MODE,$/;"	e	enum:EasySip::__anon1
HF_AUTHENTICATIONINFO	include/header_field.h	/^		HF_AUTHENTICATIONINFO,$/;"	e	enum:EasySip::__anon1
HF_AUTHORIZATION	include/header_field.h	/^		HF_AUTHORIZATION,$/;"	e	enum:EasySip::__anon1
HF_CALLID	include/header_field.h	/^		HF_CALLID = 1,$/;"	e	enum:EasySip::__anon1
HF_CALL_INFO	include/header_field.h	/^		HF_CALL_INFO,$/;"	e	enum:EasySip::__anon1
HF_CONTACT	include/header_field.h	/^		HF_CONTACT,$/;"	e	enum:EasySip::__anon1
HF_CONTENT_ENCODING	include/header_field.h	/^		HF_CONTENT_ENCODING,$/;"	e	enum:EasySip::__anon1
HF_CONTENT_LANGUAGE	include/header_field.h	/^		HF_CONTENT_LANGUAGE,$/;"	e	enum:EasySip::__anon1
HF_CONTENT_LENGTH	include/header_field.h	/^		HF_CONTENT_LENGTH,$/;"	e	enum:EasySip::__anon1
HF_CONTENT_TYPE	include/header_field.h	/^		HF_CONTENT_TYPE,$/;"	e	enum:EasySip::__anon1
HF_CSEQ	include/header_field.h	/^		HF_CSEQ,$/;"	e	enum:EasySip::__anon1
HF_DATE	include/header_field.h	/^		HF_DATE,$/;"	e	enum:EasySip::__anon1
HF_ERROR_INFO	include/header_field.h	/^		HF_ERROR_INFO,$/;"	e	enum:EasySip::__anon1
HF_EVENT	include/header_field.h	/^		HF_EVENT,$/;"	e	enum:EasySip::__anon1
HF_EXPIRES	include/header_field.h	/^		HF_EXPIRES,$/;"	e	enum:EasySip::__anon1
HF_FROM	include/header_field.h	/^		HF_FROM,$/;"	e	enum:EasySip::__anon1
HF_IN_REPLY_TO	include/header_field.h	/^		HF_IN_REPLY_TO,$/;"	e	enum:EasySip::__anon1
HF_JOIN	include/header_field.h	/^		HF_JOIN,$/;"	e	enum:EasySip::__anon1
HF_MAX_FORWARDS	include/header_field.h	/^		HF_MAX_FORWARDS,$/;"	e	enum:EasySip::__anon1
HF_MIME_VERSION	include/header_field.h	/^		HF_MIME_VERSION,$/;"	e	enum:EasySip::__anon1
HF_MIN_EXPIRES	include/header_field.h	/^		HF_MIN_EXPIRES,$/;"	e	enum:EasySip::__anon1
HF_MIN_SE	include/header_field.h	/^		HF_MIN_SE,$/;"	e	enum:EasySip::__anon1
HF_ORGANIZATION	include/header_field.h	/^		HF_ORGANIZATION,$/;"	e	enum:EasySip::__anon1
HF_PASSERTED_IDENTITY	include/header_field.h	/^		HF_PASSERTED_IDENTITY,$/;"	e	enum:EasySip::__anon1
HF_PPREFERRED_IDENTITY	include/header_field.h	/^		HF_PPREFERRED_IDENTITY,$/;"	e	enum:EasySip::__anon1
HF_PRIORITY	include/header_field.h	/^		HF_PRIORITY,$/;"	e	enum:EasySip::__anon1
HF_PRIVACY	include/header_field.h	/^		HF_PRIVACY,$/;"	e	enum:EasySip::__anon1
HF_PRIV_ANSWER_MODE	include/header_field.h	/^		HF_PRIV_ANSWER_MODE,$/;"	e	enum:EasySip::__anon1
HF_PROXY_AUTHENTICATE	include/header_field.h	/^		HF_PROXY_AUTHENTICATE,$/;"	e	enum:EasySip::__anon1
HF_PROXY_AUTHORIZATION	include/header_field.h	/^		HF_PROXY_AUTHORIZATION,$/;"	e	enum:EasySip::__anon1
HF_PROXY_REQUIRE	include/header_field.h	/^		HF_PROXY_REQUIRE,$/;"	e	enum:EasySip::__anon1
HF_P_OSP_AUTHTOKEN	include/header_field.h	/^		HF_P_OSP_AUTHTOKEN,$/;"	e	enum:EasySip::__anon1
HF_RACK	include/header_field.h	/^		HF_RACK,$/;"	e	enum:EasySip::__anon1
HF_REASON	include/header_field.h	/^		HF_REASON,$/;"	e	enum:EasySip::__anon1
HF_RECORD_ROUTE	include/header_field.h	/^		HF_RECORD_ROUTE,$/;"	e	enum:EasySip::__anon1
HF_REFERRED_BY	include/header_field.h	/^		HF_REFERRED_BY,$/;"	e	enum:EasySip::__anon1
HF_REFER_TO	include/header_field.h	/^		HF_REFER_TO,$/;"	e	enum:EasySip::__anon1
HF_REJECT_CONTACT	include/header_field.h	/^		HF_REJECT_CONTACT,$/;"	e	enum:EasySip::__anon1
HF_REPLACES	include/header_field.h	/^		HF_REPLACES,$/;"	e	enum:EasySip::__anon1
HF_REPLY_TO	include/header_field.h	/^		HF_REPLY_TO,$/;"	e	enum:EasySip::__anon1
HF_REQUEST_DISPOSITION	include/header_field.h	/^		HF_REQUEST_DISPOSITION,$/;"	e	enum:EasySip::__anon1
HF_REQUIRE	include/header_field.h	/^		HF_REQUIRE,$/;"	e	enum:EasySip::__anon1
HF_RETRY_AFTER	include/header_field.h	/^		HF_RETRY_AFTER,$/;"	e	enum:EasySip::__anon1
HF_ROUTE	include/header_field.h	/^		HF_ROUTE,$/;"	e	enum:EasySip::__anon1
HF_RSEQ	include/header_field.h	/^		HF_RSEQ,$/;"	e	enum:EasySip::__anon1
HF_SERVER	include/header_field.h	/^		HF_SERVER,$/;"	e	enum:EasySip::__anon1
HF_SESSION_EXPIRES	include/header_field.h	/^		HF_SESSION_EXPIRES,$/;"	e	enum:EasySip::__anon1
HF_SUBJECT	include/header_field.h	/^		HF_SUBJECT,$/;"	e	enum:EasySip::__anon1
HF_SUBSCRIPTION_STATE	include/header_field.h	/^		HF_SUBSCRIPTION_STATE,$/;"	e	enum:EasySip::__anon1
HF_SUPPORTED	include/header_field.h	/^		HF_SUPPORTED,$/;"	e	enum:EasySip::__anon1
HF_TIMESTAMP	include/header_field.h	/^		HF_TIMESTAMP,$/;"	e	enum:EasySip::__anon1
HF_TO	include/header_field.h	/^		HF_TO,$/;"	e	enum:EasySip::__anon1
HF_UNSUPPORTED	include/header_field.h	/^		HF_UNSUPPORTED,$/;"	e	enum:EasySip::__anon1
HF_USER_AGENT	include/header_field.h	/^		HF_USER_AGENT,$/;"	e	enum:EasySip::__anon1
HF_VIA	include/header_field.h	/^		HF_VIA,$/;"	e	enum:EasySip::__anon1
HF_WARNING	include/header_field.h	/^		HF_WARNING,$/;"	e	enum:EasySip::__anon1
HF_WWW_AUTHENTICATE	include/header_field.h	/^		HF_WWW_AUTHENTICATE,$/;"	e	enum:EasySip::__anon1
HeaderField	include/header_field.h	/^		HeaderField()$/;"	f	struct:EasySip::HeaderField
HeaderField	include/header_field.h	/^		HeaderField(std::string f, bool is_hbh = false)$/;"	f	struct:EasySip::HeaderField
HeaderField	include/header_field.h	/^		HeaderField(std::string f, std::string c, bool is_hbh = false)$/;"	f	struct:EasySip::HeaderField
HeaderField	include/header_field.h	/^	struct HeaderField$/;"	s	namespace:EasySip
HeaderFields	include/header_field.h	/^	struct HeaderFields$/;"	s	namespace:EasySip
HeaderFields	src/header_field.cpp	/^	HeaderFields::HeaderFields()$/;"	f	class:EasySip::HeaderFields
HeaderParam	include/header_field.h	/^		void HeaderParam(std::string n, std::string v)$/;"	f	struct:EasySip::HeaderField
INCLUDES	Makefile	/^INCLUDES	= include build$/;"	m
InfoMessage	include/message.h	/^		InfoMessage() : RequestMessage()$/;"	f	class:EasySip::InfoMessage
InfoMessage	include/message.h	/^		InfoMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::InfoMessage
InfoMessage	include/message.h	/^		InfoMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::InfoMessage
InfoMessage	include/message.h	/^	class InfoMessage : public RequestMessage$/;"	c	namespace:EasySip
InviteMessage	include/message.h	/^		InviteMessage()$/;"	f	class:EasySip::InviteMessage
InviteMessage	include/message.h	/^		InviteMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::InviteMessage
InviteMessage	include/message.h	/^		InviteMessage(std::string &in_msg)$/;"	f	class:EasySip::InviteMessage
InviteMessage	include/message.h	/^	class InviteMessage : public RequestMessage$/;"	c	namespace:EasySip
ItemWithParams	include/parameter.h	/^		ItemWithParams()$/;"	f	struct:EasySip::ItemWithParams
ItemWithParams	include/parameter.h	/^		ItemWithParams(std::string item)$/;"	f	struct:EasySip::ItemWithParams
ItemWithParams	include/parameter.h	/^	struct ItemWithParams$/;"	s	namespace:EasySip
LAST_BUILD_TIME	build/version.h	8;"	d
LIBS	Makefile	/^LIBS		=$/;"	m
LN	makefiles/predef.mk	/^LN		= ln -sf$/;"	m
LOCAL_IP	test/ts-osip.c	20;"	d	file:
MAX_ADDR_STR	test/ts-osip.c	10;"	d	file:
MESSAGE_ENTRY_MAX_LENGTH	test/ts-osip.c	11;"	d	file:
MESSAGE_MAX_LENGTH	test/ts-osip.c	9;"	d	file:
METHOD_ID_ACK	include/request_message.h	/^		METHOD_ID_ACK,$/;"	e	enum:EasySip::__anon2
METHOD_ID_BYE	include/request_message.h	/^		METHOD_ID_BYE,$/;"	e	enum:EasySip::__anon2
METHOD_ID_CANCEL	include/request_message.h	/^		METHOD_ID_CANCEL,$/;"	e	enum:EasySip::__anon2
METHOD_ID_INFO	include/request_message.h	/^		METHOD_ID_INFO,$/;"	e	enum:EasySip::__anon2
METHOD_ID_INVITE	include/request_message.h	/^		METHOD_ID_INVITE,$/;"	e	enum:EasySip::__anon2
METHOD_ID_MESSAGE	include/request_message.h	/^		METHOD_ID_MESSAGE,$/;"	e	enum:EasySip::__anon2
METHOD_ID_NOTIFY	include/request_message.h	/^		METHOD_ID_NOTIFY,$/;"	e	enum:EasySip::__anon2
METHOD_ID_OPTIONS	include/request_message.h	/^		METHOD_ID_OPTIONS,$/;"	e	enum:EasySip::__anon2
METHOD_ID_PRACK	include/request_message.h	/^		METHOD_ID_PRACK,$/;"	e	enum:EasySip::__anon2
METHOD_ID_REFER	include/request_message.h	/^		METHOD_ID_REFER,$/;"	e	enum:EasySip::__anon2
METHOD_ID_REGISTER	include/request_message.h	/^		METHOD_ID_REGISTER,$/;"	e	enum:EasySip::__anon2
METHOD_ID_SUBSCRIBE	include/request_message.h	/^		METHOD_ID_SUBSCRIBE,$/;"	e	enum:EasySip::__anon2
METHOD_ID_UPDATE	include/request_message.h	/^		METHOD_ID_UPDATE,$/;"	e	enum:EasySip::__anon2
MKDIR	makefiles/predef.mk	/^MKDIR	= mkdir -p$/;"	m
MaxRx	include/socket.h	/^		int MaxRx()$/;"	f	class:EasySip::SocketIp4
MaxRx	include/socket.h	/^		void MaxRx(int max)$/;"	f	class:EasySip::SocketIp4
Message	include/message.h	/^		Message()$/;"	f	class:EasySip::Message
Message	include/message.h	/^		Message(std::string msg)$/;"	f	class:EasySip::Message
Message	include/message.h	/^	class Message : public HeaderFields$/;"	c	namespace:EasySip
Message	include/socket.h	/^		std::string& Message()$/;"	f	class:EasySip::SocketIp4
Message	include/socket.h	/^		void Message(std::string msg)$/;"	f	class:EasySip::SocketIp4
MessageMessage	include/message.h	/^		MessageMessage() : RequestMessage()$/;"	f	class:EasySip::MessageMessage
MessageMessage	include/message.h	/^		MessageMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::MessageMessage
MessageMessage	include/message.h	/^		MessageMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::MessageMessage
MessageMessage	include/message.h	/^	class MessageMessage : public RequestMessage$/;"	c	namespace:EasySip
Method	include/Method/method.h	/^	class Method$/;"	c	namespace:EasySip
Method	src/Method/method.cpp	/^	Method::Method()$/;"	f	class:EasySip::Method
MethodMap	include/request_message.h	/^	typedef CodeMap MethodMap;$/;"	t	namespace:EasySip
MethodMapList	include/request_message.h	/^	typedef std::set<MethodMap> MethodMapList;$/;"	t	namespace:EasySip
Msg	include/message.h	/^		std::string Msg()$/;"	f	class:EasySip::Message
NeedBind	include/socket.h	/^		bool NeedBind()$/;"	f	class:EasySip::SocketIp4UDP
NeedBind	include/socket.h	/^		void NeedBind(bool b)$/;"	f	class:EasySip::SocketIp4UDP
NotifyMessage	include/message.h	/^		NotifyMessage() : RequestMessage()$/;"	f	class:EasySip::NotifyMessage
NotifyMessage	include/message.h	/^		NotifyMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::NotifyMessage
NotifyMessage	include/message.h	/^		NotifyMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::NotifyMessage
NotifyMessage	include/message.h	/^	class NotifyMessage : public RequestMessage$/;"	c	namespace:EasySip
OBJS	makefiles/predef.mk	/^OBJS			= $(patsubst %.cpp, $(BUILD)\/%.o, $(SOURCES))$/;"	m
ONE_HOUR	include/header_field.h	31;"	d
OptionsMessage	include/message.h	/^		OptionsMessage() : RequestMessage()$/;"	f	class:EasySip::OptionsMessage
OptionsMessage	include/message.h	/^		OptionsMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::OptionsMessage
OptionsMessage	include/message.h	/^		OptionsMessage(std::string &in_msg)$/;"	f	class:EasySip::OptionsMessage
OptionsMessage	include/message.h	/^	class OptionsMessage : public RequestMessage$/;"	c	namespace:EasySip
PROJECT	Makefile	/^PROJECT		= EasySip$/;"	m
PROJECT	build/version.h	4;"	d
PROJECT	test/Makefile	/^PROJECT		= EasySip$/;"	m
PROJECT_ALIAS	makefiles/predef.mk	/^PROJECT_ALIAS	= $(shell echo $(PROJECT)|tr '[:upper:]' '[:lower:]')$/;"	m
PROJECT_DIR	makefiles/predef.mk	/^PROJECT_DIR		= $(shell pwd)$/;"	m
Parameter	include/parameter.h	/^		Parameter()$/;"	f	class:EasySip::Parameter
Parameter	include/parameter.h	/^		Parameter(std::string name, std::string value = "")$/;"	f	class:EasySip::Parameter
Parameter	include/parameter.h	/^	class Parameter : public std::pair<std::string, std::string>$/;"	c	namespace:EasySip
Parameters	include/parameter.h	/^		Parameters() : sym_(";")$/;"	f	class:EasySip::Parameters
Parameters	include/parameter.h	/^		Parameters(std::string sym) : sym_(sym)$/;"	f	class:EasySip::Parameters
Parameters	include/parameter.h	/^	class Parameters : public std::vector<Parameter>$/;"	c	namespace:EasySip
Port	include/socket.h	/^		int Port()$/;"	f	class:EasySip::SocketIp4
Port	include/socket.h	/^		void Port(int port)$/;"	f	class:EasySip::SocketIp4
PrackMessage	include/message.h	/^		PrackMessage() : RequestMessage()$/;"	f	class:EasySip::PrackMessage
PrackMessage	include/message.h	/^		PrackMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::PrackMessage
PrackMessage	include/message.h	/^		PrackMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::PrackMessage
PrackMessage	include/message.h	/^	class PrackMessage : public RequestMessage$/;"	c	namespace:EasySip
Proxy	include/Method/proxy.h	/^	class Proxy : public Method$/;"	c	namespace:EasySip
Proxy	src/Method/proxy.cpp	/^	Proxy::Proxy()$/;"	f	class:EasySip::Proxy
REVISION	build/version.h	7;"	d
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell git log |head -1|cut -f2 -d\\ |sed -r 's\/(.{5})\/\\1-\/g'|cut -f-8 -d-)$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell svn info|grep "Last Changed Rev"|cut -f2 -d:|cut -f2 -d\\ )$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= None$/;"	m
RM	makefiles/predef.mk	/^RM		= rm -rf$/;"	m
RefOf	include/parameter.h	/^	T& RefOf(T& t) { return t; }$/;"	f	namespace:EasySip
ReferMessage	include/message.h	/^		ReferMessage() : RequestMessage()$/;"	f	class:EasySip::ReferMessage
ReferMessage	include/message.h	/^		ReferMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::ReferMessage
ReferMessage	include/message.h	/^		ReferMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::ReferMessage
ReferMessage	include/message.h	/^	class ReferMessage : public RequestMessage$/;"	c	namespace:EasySip
Registar	include/Method/registar.h	/^	class Registar : public Method$/;"	c	namespace:EasySip
Registar	src/Method/registar.cpp	/^	Registar::Registar()$/;"	f	class:EasySip::Registar
RegisterMessage	include/message.h	/^		RegisterMessage()$/;"	f	class:EasySip::RegisterMessage
RegisterMessage	include/message.h	/^		RegisterMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::RegisterMessage
RegisterMessage	include/message.h	/^		RegisterMessage(std::string &in_msg)$/;"	f	class:EasySip::RegisterMessage
RegisterMessage	include/message.h	/^	class RegisterMessage : public RequestMessage$/;"	c	namespace:EasySip
RequestLine	include/header_field.h	/^		RequestLine()$/;"	f	struct:EasySip::RequestLine
RequestLine	include/header_field.h	/^	struct RequestLine$/;"	s	namespace:EasySip
RequestMessage	include/message.h	/^		RequestMessage()$/;"	f	class:EasySip::RequestMessage
RequestMessage	include/message.h	/^		RequestMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::RequestMessage
RequestMessage	include/message.h	/^		RequestMessage(std::string &in_msg)$/;"	f	class:EasySip::RequestMessage
RequestMessage	include/message.h	/^	class RequestMessage : public Message$/;"	c	namespace:EasySip
RespCode	include/response_code.h	/^	typedef CodeMap RespCode;$/;"	t	namespace:EasySip
RespCodeList	include/response_code.h	/^	typedef std::set<RespCode> RespCodeList;$/;"	t	namespace:EasySip
RespStatus	include/message.h	/^		ResponseStatus& RespStatus()$/;"	f	class:EasySip::ResponseMessage
ResponseCode	include/message.h	/^		RespCode& ResponseCode()$/;"	f	class:EasySip::ResponseMessage
ResponseCode	include/message.h	/^		void ResponseCode(const RespCode& resp)$/;"	f	class:EasySip::ResponseMessage
ResponseMessage	include/message.h	/^		ResponseMessage()$/;"	f	class:EasySip::ResponseMessage
ResponseMessage	include/message.h	/^		ResponseMessage(RequestMessage &in_msg)$/;"	f	class:EasySip::ResponseMessage
ResponseMessage	include/message.h	/^		ResponseMessage(const RespCode &resp)$/;"	f	class:EasySip::ResponseMessage
ResponseMessage	include/message.h	/^		ResponseMessage(std::string &msg)$/;"	f	class:EasySip::ResponseMessage
ResponseMessage	include/message.h	/^	class ResponseMessage : public Message$/;"	c	namespace:EasySip
ResponseStatus	include/header_field.h	/^		ResponseStatus()$/;"	f	struct:EasySip::ResponseStatus
ResponseStatus	include/header_field.h	/^	struct ResponseStatus$/;"	s	namespace:EasySip
ResponseVer	include/message.h	/^		std::string& ResponseVer()$/;"	f	class:EasySip::ResponseMessage
ResponseVer	include/message.h	/^		void ResponseVer(std::string ver)$/;"	f	class:EasySip::ResponseMessage
SCM	Makefile	/^SCM			= git$/;"	m
SHARED_OBJ	makefiles/predef.mk	/^SHARED_OBJ		= $(BUILD)\/lib$(PROJECT_ALIAS).so$/;"	m
SIP_CONTACT	test/ts-osip.c	19;"	d	file:
SIP_FROM	test/ts-osip.c	17;"	d	file:
SIP_PORT	test/ts-osip.c	12;"	d	file:
SIP_PROXY	test/ts-osip.c	16;"	d	file:
SIP_TO	test/ts-osip.c	18;"	d	file:
SIP_VERSION	include/header_field.h	24;"	d
SIP_VERSION_1_0	include/header_field.h	21;"	d
SIP_VERSION_2_0	include/header_field.h	22;"	d
SIP_VERSION_2_0_UDP	include/header_field.h	23;"	d
SOURCES	makefiles/predef.mk	/^SOURCES			= $(shell find $(SRCS) -iregex ".*\\.c\\(c\\|pp\\|++\\|xx\\)")$/;"	m
SRCS	Makefile	/^SRCS		= src$/;"	m
STRBSLASH	test/ts.cpp	87;"	d	file:
STRDQUOTE	test/ts.cpp	85;"	d	file:
STRQUOTE	test/ts.cpp	86;"	d	file:
SelfAddr	include/socket.h	/^		std::string SelfAddr()$/;"	f	class:EasySip::SocketIp4
SelfAddr	include/socket.h	/^		void SelfAddr(std::string addr)$/;"	f	class:EasySip::SocketIp4
SelfPort	include/socket.h	/^		int SelfPort()$/;"	f	class:EasySip::SocketIp4
SelfPort	include/socket.h	/^		void SelfPort(int port)$/;"	f	class:EasySip::SocketIp4
SendMsg	test/ts-osip.c	/^int SendMsg(osip_transaction_t *tr,osip_message_t *sip, char *host,int port, int out_socket)$/;"	f
Socket	include/socket.h	/^		Socket()$/;"	f	class:EasySip::Socket
Socket	include/socket.h	/^		Socket(int domain, int type, int proto)$/;"	f	class:EasySip::Socket
Socket	include/socket.h	/^	class Socket$/;"	c	namespace:EasySip
SocketIp4	include/socket.h	/^		SocketIp4(int type, int proto = 0)$/;"	f	class:EasySip::SocketIp4
SocketIp4	include/socket.h	/^	class SocketIp4 : public Socket$/;"	c	namespace:EasySip
SocketIp4UDP	include/socket.h	/^	class SocketIp4UDP : public SocketIp4$/;"	c	namespace:EasySip
SocketIp4UDP	src/socket.cpp	/^	SocketIp4UDP::SocketIp4UDP()$/;"	f	class:EasySip::SocketIp4UDP
SocketIp4UDP	src/socket.cpp	/^	SocketIp4UDP::SocketIp4UDP(std::string addr, int port)$/;"	f	class:EasySip::SocketIp4UDP
Start	include/timer.h	/^		void Start()$/;"	f	class:EasySip::Timer
SubscribeMessage	include/message.h	/^		SubscribeMessage() : RequestMessage()$/;"	f	class:EasySip::SubscribeMessage
SubscribeMessage	include/message.h	/^		SubscribeMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::SubscribeMessage
SubscribeMessage	include/message.h	/^		SubscribeMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::SubscribeMessage
SubscribeMessage	include/message.h	/^	class SubscribeMessage : public RequestMessage$/;"	c	namespace:EasySip
Sym	include/parameter.h	/^		std::string Sym() const$/;"	f	class:EasySip::Parameters
Sym	include/parameter.h	/^		void Sym(std::string sym)$/;"	f	class:EasySip::Parameters
T1_RTT	include/timer.h	/^		T1_RTT()$/;"	f	class:EasySip::T1_Rtt
T1_Rtt	include/timer.h	/^	class T1_Rtt : public Timer$/;"	c	namespace:EasySip
T2_MAX_RETRAN_INTV	include/timer.h	/^		T2_MAX_RETRAN_INTV()$/;"	f	class:EasySip::T2_MAX_RETRAN_INTV
T2_MAX_RETRAN_INTV	include/timer.h	/^	class T2_MAX_RETRAN_INTV : public Timer$/;"	c	namespace:EasySip
T4_MAX_DURATION_OF_MSG	include/timer.h	/^		T4_MAX_DURATION_OF_MSG()$/;"	f	class:EasySip::T4_MAX_DURATION_OF_MSG
T4_MAX_DURATION_OF_MSG	include/timer.h	/^	class T4_MAX_DURATION_OF_MSG : public Timer$/;"	c	namespace:EasySip
TA_INVITE_RETRAN_INTERVAL	include/timer.h	/^		TA_INVITE_RETRAN_INTERVAL()$/;"	f	class:EasySip::TA_INVITE_RETRAN_INTERVAL
TA_INVITE_RETRAN_INTERVAL	include/timer.h	/^	class TA_INVITE_RETRAN_INTERVAL : public Timer$/;"	c	namespace:EasySip
TB_INVITE_TIMEOUT	include/timer.h	/^		TB_INVITE_TIMEOUT()$/;"	f	class:EasySip::TB_INVITE_TIMEOUT
TB_INVITE_TIMEOUT	include/timer.h	/^	class TB_INVITE_TIMEOUT : public Timer$/;"	c	namespace:EasySip
TC_PROXY_INVITE_TIMEOUT	include/timer.h	/^		TC_PROXY_INVITE_TIMEOUT()$/;"	f	class:EasySip::TC_PROXY_INVITE_TIMEOUT
TC_PROXY_INVITE_TIMEOUT	include/timer.h	/^	class TC_PROXY_INVITE_TIMEOUT : public Timer$/;"	c	namespace:EasySip
TD_WAIT_FOR_RETRAN	include/timer.h	/^		TD_WAIT_FOR_RETRAN()$/;"	f	class:EasySip::TD_WAIT_FOR_RETRAN
TD_WAIT_FOR_RETRAN	include/timer.h	/^	class TD_WAIT_FOR_RETRAN : public Timer$/;"	c	namespace:EasySip
TE_NON_INVITE_RETRAN_INTV	include/timer.h	/^		TE_NON_INVITE_RETRAN_INTV()$/;"	f	class:EasySip::TE_NON_INVITE_RETRAN_INTV
TE_NON_INVITE_RETRAN_INTV	include/timer.h	/^	class TE_NON_INVITE_RETRAN_INTV : public Timer$/;"	c	namespace:EasySip
TF_NON_INVITE_REQS_TIMEOUT	include/timer.h	/^		TF_NON_INVITE_REQS_TIMEOUT()$/;"	f	class:EasySip::TF_NON_INVITE_REQS_TIMEOUT
TF_NON_INVITE_REQS_TIMEOUT	include/timer.h	/^	class TF_NON_INVITE_REQS_TIMEOUT : public Timer$/;"	c	namespace:EasySip
TG_INVITE_RESP_RETRAN_INTV	include/timer.h	/^		TG_INVITE_RESP_RETRAN_INTV()$/;"	f	class:EasySip::TG_INVITE_RESP_RETRAN_INTV
TG_INVITE_RESP_RETRAN_INTV	include/timer.h	/^	class TG_INVITE_RESP_RETRAN_INTV : public Timer$/;"	c	namespace:EasySip
TH_WAIT_FOR_ACK_RECEIPT	include/timer.h	/^		TH_WAIT_FOR_ACK_RECEIPT()$/;"	f	class:EasySip::TH_WAIT_FOR_ACK_RECEIPT
TH_WAIT_FOR_ACK_RECEIPT	include/timer.h	/^	class TH_WAIT_FOR_ACK_RECEIPT : public Timer$/;"	c	namespace:EasySip
TI_WAIT_FOR_ACK_RETRAN	include/timer.h	/^		TI_WAIT_FOR_ACK_RETRAN()$/;"	f	class:EasySip::TI_WAIT_FOR_ACK_RETRAN
TI_WAIT_FOR_ACK_RETRAN	include/timer.h	/^	class TI_WAIT_FOR_ACK_RETRAN : public Timer$/;"	c	namespace:EasySip
TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN	include/timer.h	/^		TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN()$/;"	f	class:EasySip::TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN
TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN	include/timer.h	/^	class TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN : public Timer$/;"	c	namespace:EasySip
TK_WAIT_FOR_RESP_RETRAN	include/timer.h	/^		TK_WAIT_FOR_RESP_RETRAN()$/;"	f	class:EasySip::TK_WAIT_FOR_RESP_RETRAN
TK_WAIT_FOR_RESP_RETRAN	include/timer.h	/^	class TK_WAIT_FOR_RESP_RETRAN : public Timer$/;"	c	namespace:EasySip
TOUCH	makefiles/predef.mk	/^TOUCH	= touch$/;"	m
T_HF_MAP	include/header_field.h	/^	typedef std::map<std::string, size_t> T_HF_MAP;$/;"	t	namespace:EasySip
Thread	include/thread.h	/^	class Thread$/;"	c	namespace:EasySip
Thread	src/thread.cpp	/^	Thread::Thread()$/;"	f	class:EasySip::Thread
Timer	include/timer.h	/^		Timer(Timer &tm)$/;"	f	class:EasySip::Timer
Timer	include/timer.h	/^		Timer(std::string value)$/;"	f	class:EasySip::Timer
Timer	include/timer.h	/^		Timer(unsigned long value)$/;"	f	class:EasySip::Timer
Timer	include/timer.h	/^	class Timer$/;"	c	namespace:EasySip
UAClient	include/Method/uaclient.h	/^	class UAClient : public Method$/;"	c	namespace:EasySip
UAClient	src/Method/uaclient.cpp	/^		UAClient::UAClient()$/;"	f	class:EasySip::UAClient
UAServer	include/Method/uaserver.h	/^	class UAServer : public Method$/;"	c	namespace:EasySip
UAServer	src/Method/uaserver.cpp	/^	UAServer::UAServer()$/;"	f	class:EasySip::UAServer
USER_ID	test/ts-osip.c	15;"	d	file:
UpdateMessage	include/message.h	/^		UpdateMessage() : RequestMessage()$/;"	f	class:EasySip::UpdateMessage
UpdateMessage	include/message.h	/^		UpdateMessage(RequestMessage &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::UpdateMessage
UpdateMessage	include/message.h	/^		UpdateMessage(std::string &in_msg) : RequestMessage(in_msg)$/;"	f	class:EasySip::UpdateMessage
UpdateMessage	include/message.h	/^	class UpdateMessage : public RequestMessage$/;"	c	namespace:EasySip
VERSION	Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION	build/version.h	6;"	d
VERSION	test/Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION_HEADER	makefiles/predef.mk	/^VERSION_HEADER	= $(BUILD)\/version.h$/;"	m
Value	test/ts.cpp	/^	unsigned long Value()$/;"	f	class:A
Value	test/ts.cpp	/^	void Value(unsigned long val)$/;"	f	class:A
Values	include/header_field.h	/^		std::string Values()$/;"	f	struct:EasySip::HeaderField
WarnCode	include/response_code.h	/^	typedef CodeMap WarnCode;$/;"	t	namespace:EasySip
WarningValue	include/header_field.h	/^		struct WarningValue$/;"	s	struct:EasySip::HFWarning
accept_	include/header_field.h	/^		std::vector<HFAccept*> accept_; \/\/ type\/sub-type$/;"	m	struct:EasySip::HeaderFields
accept_contact_	include/header_field.h	/^		std::vector<HFAcceptContact*> accept_contact_;$/;"	m	struct:EasySip::HeaderFields
accept_encoding_	include/header_field.h	/^		std::vector<HFAcceptEncoding*> accept_encoding_;$/;"	m	struct:EasySip::HeaderFields
accept_language_	include/header_field.h	/^		std::vector<HFAcceptLanguage*> accept_language_;$/;"	m	struct:EasySip::HeaderFields
ack_request	src/Method/method.cpp	/^	int Method::ack_request()$/;"	f	class:EasySip::Method
add_accept	src/message.cpp	/^	HFAccept& Message::add_accept()$/;"	f	class:EasySip::Message
add_accept_contact	src/message.cpp	/^	HFAcceptContact& Message::add_accept_contact()$/;"	f	class:EasySip::Message
add_accept_encoding	src/message.cpp	/^	HFAcceptEncoding& Message::add_accept_encoding()$/;"	f	class:EasySip::Message
add_accept_language	src/message.cpp	/^	HFAcceptLanguage& Message::add_accept_language()$/;"	f	class:EasySip::Message
add_alert_info	src/message.cpp	/^	HFAlertInfo& Message::add_alert_info()$/;"	f	class:EasySip::Message
add_allow	src/message.cpp	/^	HFAllow& Message::add_allow()$/;"	f	class:EasySip::Message
add_allow_events	src/message.cpp	/^	HFAllowEvents& Message::add_allow_events()$/;"	f	class:EasySip::Message
add_answer_mode	src/message.cpp	/^	HFAnswerMode& Message::add_answer_mode()$/;"	f	class:EasySip::Message
add_authentication_info	src/message.cpp	/^	HFAuthenticationInfo& Message::add_authentication_info()$/;"	f	class:EasySip::Message
add_authorization	src/message.cpp	/^	HFAuthorization& Message::add_authorization()$/;"	f	class:EasySip::Message
add_call_id	src/message.cpp	/^	HFCallId& Message::add_call_id()$/;"	f	class:EasySip::Message
add_call_info	src/message.cpp	/^	HFCallInfo& Message::add_call_info()$/;"	f	class:EasySip::Message
add_contact	src/message.cpp	/^	HFContact& Message::add_contact()$/;"	f	class:EasySip::Message
add_content_encoding	src/message.cpp	/^	HFContentEncoding& Message::add_content_encoding()$/;"	f	class:EasySip::Message
add_content_language	src/message.cpp	/^	HFContentLanguage& Message::add_content_language()$/;"	f	class:EasySip::Message
add_content_length	src/message.cpp	/^	HFContentLength& Message::add_content_length()$/;"	f	class:EasySip::Message
add_content_type	src/message.cpp	/^	HFContentType& Message::add_content_type()$/;"	f	class:EasySip::Message
add_cseq	src/message.cpp	/^	HFCSeq& Message::add_cseq()$/;"	f	class:EasySip::Message
add_date	src/message.cpp	/^	HFDate& Message::add_date()$/;"	f	class:EasySip::Message
add_error_info	src/message.cpp	/^	HFErrorInfo& Message::add_error_info()$/;"	f	class:EasySip::Message
add_event	src/message.cpp	/^	HFEvent& Message::add_event()$/;"	f	class:EasySip::Message
add_expires	src/message.cpp	/^	HFExpires& Message::add_expires()$/;"	f	class:EasySip::Message
add_from	src/message.cpp	/^	HFFrom& Message::add_from()$/;"	f	class:EasySip::Message
add_in_replay_to	src/message.cpp	/^	HFInReplyTo& Message::add_in_replay_to()$/;"	f	class:EasySip::Message
add_join	src/message.cpp	/^	HFJoin& Message::add_join()$/;"	f	class:EasySip::Message
add_max_forwards	src/message.cpp	/^	HFMaxForwards& Message::add_max_forwards()$/;"	f	class:EasySip::Message
add_mime_version	src/message.cpp	/^	HFMIMEVersion& Message::add_mime_version()$/;"	f	class:EasySip::Message
add_min_expires	src/message.cpp	/^	HFMinExpires& Message::add_min_expires()$/;"	f	class:EasySip::Message
add_min_se	src/message.cpp	/^	HFMinSE& Message::add_min_se()$/;"	f	class:EasySip::Message
add_name	include/header_field.h	/^		void add_name(std::string name)$/;"	f	struct:EasySip::HFBase_1_
add_organization	src/message.cpp	/^	HFOrganization& Message::add_organization()$/;"	f	class:EasySip::Message
add_p_asserted_identity	src/message.cpp	/^	HFPAssertedIdentity& Message::add_p_asserted_identity()$/;"	f	class:EasySip::Message
add_p_osp_auth_token	src/message.cpp	/^	HFPOSPAuthToken& Message::add_p_osp_auth_token()$/;"	f	class:EasySip::Message
add_p_preferred_identity	src/message.cpp	/^	HFPPreferredIdentity& Message::add_p_preferred_identity()$/;"	f	class:EasySip::Message
add_param	include/header_field.h	/^		void add_param(std::string key, std::string value = "")$/;"	f	struct:EasySip::HFBase_1_
add_param	include/parameter.h	/^		void add_param(std::string name, std::string value = "")$/;"	f	struct:EasySip::ItemWithParams
add_priority	src/message.cpp	/^	HFPriority& Message::add_priority()$/;"	f	class:EasySip::Message
add_priv_answer_mode	src/message.cpp	/^	HFPrivAnswerMode& Message::add_priv_answer_mode()$/;"	f	class:EasySip::Message
add_privacy	src/message.cpp	/^	HFPrivacy& Message::add_privacy()$/;"	f	class:EasySip::Message
add_proxy_authenticate	src/message.cpp	/^	HFProxyAuthenticate& Message::add_proxy_authenticate()$/;"	f	class:EasySip::Message
add_proxy_authorization	src/message.cpp	/^	HFProxyAuthorization& Message::add_proxy_authorization()$/;"	f	class:EasySip::Message
add_proxy_require	src/message.cpp	/^	HFProxyRequire& Message::add_proxy_require()$/;"	f	class:EasySip::Message
add_rack	src/message.cpp	/^	HFRack& Message::add_rack()$/;"	f	class:EasySip::Message
add_reason	src/message.cpp	/^	HFReason& Message::add_reason()$/;"	f	class:EasySip::Message
add_record_route	src/message.cpp	/^	HFRecordRoute& Message::add_record_route()$/;"	f	class:EasySip::Message
add_refer_to	src/message.cpp	/^	HFReferTo& Message::add_refer_to()$/;"	f	class:EasySip::Message
add_referred_by	src/message.cpp	/^	HFReferredBy& Message::add_referred_by()$/;"	f	class:EasySip::Message
add_reject_contact	src/message.cpp	/^	HFRejectContact& Message::add_reject_contact()$/;"	f	class:EasySip::Message
add_replaces	src/message.cpp	/^	HFReplaces& Message::add_replaces()$/;"	f	class:EasySip::Message
add_reply_to	src/message.cpp	/^	HFReplyTo& Message::add_reply_to()$/;"	f	class:EasySip::Message
add_request_disposition	src/message.cpp	/^	HFRequestDisposition& Message::add_request_disposition()$/;"	f	class:EasySip::Message
add_require	src/message.cpp	/^	HFRequire& Message::add_require()$/;"	f	class:EasySip::Message
add_retry_after	src/message.cpp	/^	HFRetryAfter& Message::add_retry_after()$/;"	f	class:EasySip::Message
add_route	src/message.cpp	/^	HFRoute& Message::add_route()$/;"	f	class:EasySip::Message
add_rseq	src/message.cpp	/^	HFRSeq& Message::add_rseq()$/;"	f	class:EasySip::Message
add_server	src/message.cpp	/^	HFServer& Message::add_server()$/;"	f	class:EasySip::Message
add_session_expires	src/message.cpp	/^	HFSessionExpires& Message::add_session_expires()$/;"	f	class:EasySip::Message
add_subject	src/message.cpp	/^	HFSubject& Message::add_subject()$/;"	f	class:EasySip::Message
add_subscription_state	src/message.cpp	/^	HFSubscriptionState& Message::add_subscription_state()$/;"	f	class:EasySip::Message
add_supported	src/message.cpp	/^	HFSupported& Message::add_supported()$/;"	f	class:EasySip::Message
add_timestamp	src/message.cpp	/^	HFTimestamp& Message::add_timestamp()$/;"	f	class:EasySip::Message
add_to	src/message.cpp	/^	HFTo& Message::add_to()$/;"	f	class:EasySip::Message
add_unsupported	src/message.cpp	/^	HFUnsupported& Message::add_unsupported()$/;"	f	class:EasySip::Message
add_uri	include/header_field.h	/^		void add_uri(std::string uri)$/;"	f	struct:EasySip::HFBase_1_
add_user_agent	src/message.cpp	/^	HFUserAgent& Message::add_user_agent()$/;"	f	class:EasySip::Message
add_value	include/header_field.h	/^		HFAccept& add_value(std::string type, std::string subtype)$/;"	f	struct:EasySip::HFAccept
add_value	include/header_field.h	/^		virtual HFBase_2_& add_value(std::string val)$/;"	f	struct:EasySip::HFBase_2_
add_value	include/header_field.h	/^		virtual HFBase_3_& add_value(std::string val)$/;"	f	struct:EasySip::HFBase_3_
add_via	src/message.cpp	/^	HFVia& Message::add_via()$/;"	f	class:EasySip::Message
add_warning	src/message.cpp	/^	HFWarning& Message::add_warning()$/;"	f	class:EasySip::Message
add_www_authenticate	src/message.cpp	/^	HFWWWAuthenticate& Message::add_www_authenticate()$/;"	f	class:EasySip::Message
addr_	include/socket.h	/^		std::string addr_;$/;"	m	class:EasySip::SocketIp4
agent_	include/header_field.h	/^			std::string agent_;$/;"	m	struct:EasySip::HFWarning::WarningValue
alert_info_	include/header_field.h	/^		std::vector<HFAlertInfo*> alert_info_;$/;"	m	struct:EasySip::HeaderFields
allow_	include/header_field.h	/^		std::vector<HFAllow*> allow_;$/;"	m	struct:EasySip::HeaderFields
allow_events_	include/header_field.h	/^		std::vector<HFAllowEvents*> allow_events_;$/;"	m	struct:EasySip::HeaderFields
allowed_fields_	include/header_field.h	/^		static T_HF_MAP allowed_fields_;$/;"	m	struct:EasySip::HeaderFields
allowed_fields_	src/header_field.cpp	/^	T_HF_MAP HeaderFields::allowed_fields_;$/;"	m	class:EasySip::HeaderFields	file:
allowed_methods_	include/Method/method.h	/^		MethodMapList allowed_methods_;$/;"	m	class:EasySip::Method
allowed_responses_	include/Method/method.h	/^		RespCodeList allowed_responses_;$/;"	m	class:EasySip::Method
answer_mode_	include/header_field.h	/^		std::vector<HFAnswerMode*> answer_mode_;$/;"	m	struct:EasySip::HeaderFields
append	include/parameter.h	/^		void append(std::string name)$/;"	f	class:EasySip::Parameters
append	include/parameter.h	/^		void append(std::string name, std::string value)$/;"	f	class:EasySip::Parameters
append_userdata	include/message.h	/^		void append_userdata(std::string buf)$/;"	f	class:EasySip::Message
arg_	include/thread.h	/^		void *arg_;$/;"	m	class:EasySip::Thread
attr_	include/thread.h	/^		pthread_attr_t attr_;$/;"	m	class:EasySip::Thread
authentication_info_	include/header_field.h	/^		std::vector<HFAuthenticationInfo*> authentication_info_;$/;"	m	struct:EasySip::HeaderFields
authorization_	include/header_field.h	/^		std::vector<HFAuthorization*> authorization_;$/;"	m	struct:EasySip::HeaderFields
bSipRegister	test/ts-osip.c	/^int bSipRegister(void *cookie)$/;"	f
bSipRegisterBuild	test/ts-osip.c	/^int bSipRegisterBuild(osip_message_t **regMsgPtrPtr)$/;"	f
bSipSend	test/ts-osip.c	/^int bSipSend($/;"	f
binded_	include/socket.h	/^		bool binded_;$/;"	m	class:EasySip::SocketIp4UDP
bye_request	src/Method/method.cpp	/^	int Method::bye_request()$/;"	f	class:EasySip::Method
call_id_	include/header_field.h	/^		std::vector<HFCallId*> call_id_;$/;"	m	struct:EasySip::HeaderFields
call_info_	include/header_field.h	/^		std::vector<HFCallInfo*> call_info_;$/;"	m	struct:EasySip::HeaderFields
cancel_request	src/Method/method.cpp	/^	int Method::cancel_request()$/;"	f	class:EasySip::Method
cb_rcvICTRes	test/ts-osip.c	/^void cb_rcvICTRes(int type, osip_transaction_t *pott,osip_message_t *pomt)$/;"	f
cb_rcvNICTRes	test/ts-osip.c	/^void cb_rcvNICTRes(int type, osip_transaction_t *pott,osip_message_t *pomt)$/;"	f
cb_rcvreq	test/ts-osip.c	/^void cb_rcvreq(int type, osip_transaction_t *pott,osip_message_t *pomt)$/;"	f
challenge_	include/header_field.h	/^		std::string challenge_;$/;"	m	struct:EasySip::HFWWWAuthenticate
cleanup_empty_uri	include/uri.h	/^		void cleanup_empty_uri()$/;"	f	struct:EasySip::ContactList
cli_udp_	include/Method/method.h	/^		SocketIp4UDP cli_udp_;$/;"	m	class:EasySip::Method
code_	include/header_field.h	/^			std::string code_;$/;"	m	struct:EasySip::HFWarning::WarningValue
compact_form_	include/header_field.h	/^		std::string compact_form_;$/;"	m	struct:EasySip::HeaderField
composite_ty_	include/header_field.h	/^		std::string composite_ty_;$/;"	m	struct:EasySip::HFContentType
cons_	include/header_field.h	/^		ContactList cons_;$/;"	m	struct:EasySip::HFBase_1_
contact_	include/header_field.h	/^		std::vector<HFContact*> contact_;$/;"	m	struct:EasySip::HeaderFields
content_encoding_	include/header_field.h	/^		std::vector<HFContentEncoding*> content_encoding_;$/;"	m	struct:EasySip::HeaderFields
content_language_	include/header_field.h	/^		std::vector<HFContentLanguage*> content_language_;$/;"	m	struct:EasySip::HeaderFields
content_length_	include/header_field.h	/^		std::vector<HFContentLength*> content_length_;$/;"	m	struct:EasySip::HeaderFields
content_type_	include/header_field.h	/^		std::vector<HFContentType*> content_type_;$/;"	m	struct:EasySip::HeaderFields
create	src/message.cpp	/^	Message& Message::create()$/;"	f	class:EasySip::Message
create	src/message.cpp	/^	RequestMessage& RequestMessage::create()$/;"	f	class:EasySip::RequestMessage
create	src/message.cpp	/^	ResponseMessage& ResponseMessage::create()$/;"	f	class:EasySip::ResponseMessage
cseq_	include/header_field.h	/^		std::string cseq_;$/;"	m	struct:EasySip::HFCSeq
cseq_	include/header_field.h	/^		std::vector<HFCSeq*> cseq_;$/;"	m	struct:EasySip::HeaderFields
date_	include/header_field.h	/^		std::vector<HFDate*> date_;$/;"	m	struct:EasySip::HeaderFields
digest_cln_	include/header_field.h	/^		Parameters digest_cln_;$/;"	m	struct:EasySip::HFWWWAuthenticate
digit_value_	include/header_field.h	/^		std::string digit_value_;$/;"	m	struct:EasySip::HFBase_2_
discrete_ty_	include/header_field.h	/^		std::string discrete_ty_;$/;"	m	struct:EasySip::HFContentType
do_if_is_alpha	include/uri.h	118;"	d
domain_	include/socket.h	/^		int domain_;$/;"	m	class:EasySip::Socket
dotted_value_	include/header_field.h	/^		std::string dotted_value_;$/;"	m	struct:EasySip::HFMIMEVersion
error_info_	include/header_field.h	/^		std::vector<HFErrorInfo*> error_info_;$/;"	m	struct:EasySip::HeaderFields
event_	include/header_field.h	/^		std::vector<HFEvent*> event_;$/;"	m	struct:EasySip::HeaderFields
expire	include/header_field.h	/^		std::string expire()$/;"	f	struct:EasySip::HFExpires
expire	include/header_field.h	/^		void expire(std::string val)$/;"	f	struct:EasySip::HFExpires
expires_	include/header_field.h	/^		std::vector<HFExpires*> expires_; \/\/ in second$/;"	m	struct:EasySip::HeaderFields
field_	include/header_field.h	/^		std::string field_;$/;"	m	struct:EasySip::HeaderField
from_	include/header_field.h	/^		std::vector<HFFrom*> from_;$/;"	m	struct:EasySip::HeaderFields
func_cb	test/ts-thr-timer.cpp	/^typedef void (*func_cb)();$/;"	t	file:
generate_values	src/header_field.cpp	/^	void HFAccept::generate_values()$/;"	f	class:EasySip::HFAccept
generate_values	src/header_field.cpp	/^	void HFAcceptContact::generate_values()$/;"	f	class:EasySip::HFAcceptContact
generate_values	src/header_field.cpp	/^	void HFAcceptEncoding::generate_values()$/;"	f	class:EasySip::HFAcceptEncoding
generate_values	src/header_field.cpp	/^	void HFAlertInfo::generate_values()$/;"	f	class:EasySip::HFAlertInfo
generate_values	src/header_field.cpp	/^	void HFAllowEvents::generate_values()$/;"	f	class:EasySip::HFAllowEvents
generate_values	src/header_field.cpp	/^	void HFAnswerMode::generate_values()$/;"	f	class:EasySip::HFAnswerMode
generate_values	src/header_field.cpp	/^	void HFAuthenticationInfo::generate_values()$/;"	f	class:EasySip::HFAuthenticationInfo
generate_values	src/header_field.cpp	/^	void HFAuthorization::generate_values()$/;"	f	class:EasySip::HFAuthorization
generate_values	src/header_field.cpp	/^	void HFBase_1_::generate_values()$/;"	f	class:EasySip::HFBase_1_
generate_values	src/header_field.cpp	/^	void HFBase_2_::generate_values()$/;"	f	class:EasySip::HFBase_2_
generate_values	src/header_field.cpp	/^	void HFBase_3_::generate_values()$/;"	f	class:EasySip::HFBase_3_
generate_values	src/header_field.cpp	/^	void HFCSeq::generate_values()$/;"	f	class:EasySip::HFCSeq
generate_values	src/header_field.cpp	/^	void HFCallId::generate_values()$/;"	f	class:EasySip::HFCallId
generate_values	src/header_field.cpp	/^	void HFCallInfo::generate_values()$/;"	f	class:EasySip::HFCallInfo
generate_values	src/header_field.cpp	/^	void HFContentEncoding::generate_values()$/;"	f	class:EasySip::HFContentEncoding
generate_values	src/header_field.cpp	/^	void HFContentLanguage::generate_values()$/;"	f	class:EasySip::HFContentLanguage
generate_values	src/header_field.cpp	/^	void HFContentType::generate_values()$/;"	f	class:EasySip::HFContentType
generate_values	src/header_field.cpp	/^	void HFDate::generate_values()$/;"	f	class:EasySip::HFDate
generate_values	src/header_field.cpp	/^	void HFErrorInfo::generate_values()$/;"	f	class:EasySip::HFErrorInfo
generate_values	src/header_field.cpp	/^	void HFEvent::generate_values()$/;"	f	class:EasySip::HFEvent
generate_values	src/header_field.cpp	/^	void HFInReplyTo::generate_values()$/;"	f	class:EasySip::HFInReplyTo
generate_values	src/header_field.cpp	/^	void HFJoin::generate_values()$/;"	f	class:EasySip::HFJoin
generate_values	src/header_field.cpp	/^	void HFMIMEVersion::generate_values()$/;"	f	class:EasySip::HFMIMEVersion
generate_values	src/header_field.cpp	/^	void HFMinSE::generate_values()$/;"	f	class:EasySip::HFMinSE
generate_values	src/header_field.cpp	/^	void HFOrganization::generate_values()$/;"	f	class:EasySip::HFOrganization
generate_values	src/header_field.cpp	/^	void HFPAssertedIdentity::generate_values()$/;"	f	class:EasySip::HFPAssertedIdentity
generate_values	src/header_field.cpp	/^	void HFPOSPAuthToken::generate_values()$/;"	f	class:EasySip::HFPOSPAuthToken
generate_values	src/header_field.cpp	/^	void HFPPreferredIdentity::generate_values()$/;"	f	class:EasySip::HFPPreferredIdentity
generate_values	src/header_field.cpp	/^	void HFPriority::generate_values()$/;"	f	class:EasySip::HFPriority
generate_values	src/header_field.cpp	/^	void HFPrivAnswerMode::generate_values()$/;"	f	class:EasySip::HFPrivAnswerMode
generate_values	src/header_field.cpp	/^	void HFPrivacy::generate_values()$/;"	f	class:EasySip::HFPrivacy
generate_values	src/header_field.cpp	/^	void HFProxyAuthenticate::generate_values()$/;"	f	class:EasySip::HFProxyAuthenticate
generate_values	src/header_field.cpp	/^	void HFProxyAuthorization::generate_values()$/;"	f	class:EasySip::HFProxyAuthorization
generate_values	src/header_field.cpp	/^	void HFRSeq::generate_values()$/;"	f	class:EasySip::HFRSeq
generate_values	src/header_field.cpp	/^	void HFRack::generate_values()$/;"	f	class:EasySip::HFRack
generate_values	src/header_field.cpp	/^	void HFReason::generate_values()$/;"	f	class:EasySip::HFReason
generate_values	src/header_field.cpp	/^	void HFRecordRoute::generate_values()$/;"	f	class:EasySip::HFRecordRoute
generate_values	src/header_field.cpp	/^	void HFReferTo::generate_values()$/;"	f	class:EasySip::HFReferTo
generate_values	src/header_field.cpp	/^	void HFReferredBy::generate_values()$/;"	f	class:EasySip::HFReferredBy
generate_values	src/header_field.cpp	/^	void HFRejectContact::generate_values()$/;"	f	class:EasySip::HFRejectContact
generate_values	src/header_field.cpp	/^	void HFReplaces::generate_values()$/;"	f	class:EasySip::HFReplaces
generate_values	src/header_field.cpp	/^	void HFReplyTo::generate_values()$/;"	f	class:EasySip::HFReplyTo
generate_values	src/header_field.cpp	/^	void HFRequestDisposition::generate_values()$/;"	f	class:EasySip::HFRequestDisposition
generate_values	src/header_field.cpp	/^	void HFRetryAfter::generate_values()$/;"	f	class:EasySip::HFRetryAfter
generate_values	src/header_field.cpp	/^	void HFRoute::generate_values()$/;"	f	class:EasySip::HFRoute
generate_values	src/header_field.cpp	/^	void HFSessionExpires::generate_values()$/;"	f	class:EasySip::HFSessionExpires
generate_values	src/header_field.cpp	/^	void HFSubscriptionState::generate_values()$/;"	f	class:EasySip::HFSubscriptionState
generate_values	src/header_field.cpp	/^	void HFTimestamp::generate_values()$/;"	f	class:EasySip::HFTimestamp
generate_values	src/header_field.cpp	/^	void HFUnsupported::generate_values()$/;"	f	class:EasySip::HFUnsupported
generate_values	src/header_field.cpp	/^	void HFUserAgent::generate_values()$/;"	f	class:EasySip::HFUserAgent
generate_values	src/header_field.cpp	/^	void HFVia::generate_values()$/;"	f	class:EasySip::HFVia
generate_values	src/header_field.cpp	/^	void HFWWWAuthenticate::generate_values()$/;"	f	class:EasySip::HFWWWAuthenticate
generate_values	src/header_field.cpp	/^	void HFWarning::generate_values()$/;"	f	class:EasySip::HFWarning
get_ip_addr	src/socket.cpp	/^	std::string Socket::get_ip_addr()$/;"	f	class:EasySip::Socket
get_method_from_buffer	src/message.cpp	/^	int Message::get_method_from_buffer($/;"	f	class:EasySip::Message
get_response_code_from_buffer	src/message.cpp	/^	int Message::get_response_code_from_buffer($/;"	f	class:EasySip::Message
get_value_by_name	include/parameter.h	/^		std::string get_value_by_name(std::string name)$/;"	f	class:EasySip::Parameters
has_name	include/parameter.h	/^		bool has_name(std::string name)$/;"	f	class:EasySip::Parameters
header_params_	include/header_field.h	/^		Parameters header_params_;$/;"	m	struct:EasySip::HeaderField
id_	include/header_field.h	/^		std::string id_;$/;"	m	struct:EasySip::HFCallId
id_	include/thread.h	/^		pthread_t id_;$/;"	m	class:EasySip::Thread
in_replay_to_	include/header_field.h	/^		std::vector<HFInReplyTo*> in_replay_to_;$/;"	m	struct:EasySip::HeaderFields
info_request	src/Method/method.cpp	/^	int Method::info_request()$/;"	f	class:EasySip::Method
init_allowed_fields	src/header_field.cpp	/^	void HeaderFields::init_allowed_fields()$/;"	f	class:EasySip::HeaderFields
init_allowed_methods	src/Method/method.cpp	/^	void Method::init_allowed_methods()$/;"	f	class:EasySip::Method
init_allowed_responses	src/Method/method.cpp	/^	void Method::init_allowed_responses()$/;"	f	class:EasySip::Method
invite_request	src/Method/method.cpp	/^	int Method::invite_request()$/;"	f	class:EasySip::Method
is_hop_by_hop_	include/header_field.h	/^		bool is_hop_by_hop_;$/;"	m	struct:EasySip::HeaderField
is_valid	src/message.cpp	/^	bool AckMessage::is_valid()$/;"	f	class:EasySip::AckMessage
is_valid	src/message.cpp	/^	bool ByeMessage::is_valid()$/;"	f	class:EasySip::ByeMessage
is_valid	src/message.cpp	/^	bool CancelMessage::is_valid()$/;"	f	class:EasySip::CancelMessage
is_valid	src/message.cpp	/^	bool InfoMessage::is_valid()$/;"	f	class:EasySip::InfoMessage
is_valid	src/message.cpp	/^	bool InviteMessage::is_valid()$/;"	f	class:EasySip::InviteMessage
is_valid	src/message.cpp	/^	bool Message::is_valid()$/;"	f	class:EasySip::Message
is_valid	src/message.cpp	/^	bool MessageMessage::is_valid()$/;"	f	class:EasySip::MessageMessage
is_valid	src/message.cpp	/^	bool NotifyMessage::is_valid()$/;"	f	class:EasySip::NotifyMessage
is_valid	src/message.cpp	/^	bool OptionsMessage::is_valid()$/;"	f	class:EasySip::OptionsMessage
is_valid	src/message.cpp	/^	bool PrackMessage::is_valid()$/;"	f	class:EasySip::PrackMessage
is_valid	src/message.cpp	/^	bool ReferMessage::is_valid()$/;"	f	class:EasySip::ReferMessage
is_valid	src/message.cpp	/^	bool RegisterMessage::is_valid()$/;"	f	class:EasySip::RegisterMessage
is_valid	src/message.cpp	/^	bool SubscribeMessage::is_valid()$/;"	f	class:EasySip::SubscribeMessage
is_valid	src/message.cpp	/^	bool UpdateMessage::is_valid()$/;"	f	class:EasySip::UpdateMessage
is_value_valid	include/header_field.h	/^		bool is_value_valid()$/;"	f	struct:EasySip::HeaderField
items_	include/parameter.h	/^		std::vector<std::string> items_;$/;"	m	struct:EasySip::ItemWithParams
join_	include/header_field.h	/^		std::vector<HFJoin*> join_;$/;"	m	struct:EasySip::HeaderFields
length	include/header_field.h	/^		std::string length()$/;"	f	struct:EasySip::HFContentLength
length	include/header_field.h	/^		void length(std::string val)$/;"	f	struct:EasySip::HFContentLength
main	test/ts-header.cpp	/^int main()$/;"	f
main	test/ts-ip.cpp	/^int main (int argc, const char * argv[])$/;"	f
main	test/ts-osip.c	/^int main()$/;"	f
main	test/ts-pair.cpp	/^int main()$/;"	f
main	test/ts-shareptr.cpp	/^int main()$/;"	f
main	test/ts-thr-timer.cpp	/^int main()$/;"	f
main	test/ts-timer.cpp	/^int main()$/;"	f
main	test/ts-udp-d.cpp	/^int main()$/;"	f
main	test/ts-udp.cpp	/^int main()$/;"	f
main	test/ts.cpp	/^int main()$/;"	f
max_forwards	include/header_field.h	/^		std::string max_forwards()$/;"	f	struct:EasySip::HFMaxForwards
max_forwards	include/header_field.h	/^		void max_forwards(std::string val)$/;"	f	struct:EasySip::HFMaxForwards
max_forwards_	include/header_field.h	/^		std::vector<HFMaxForwards*> max_forwards_;$/;"	m	struct:EasySip::HeaderFields
max_rx_	include/socket.h	/^		int max_rx_;$/;"	m	class:EasySip::SocketIp4
message_request	src/Method/method.cpp	/^	int Method::message_request()$/;"	f	class:EasySip::Method
method	include/message.h	/^		MethodMap method()$/;"	f	class:EasySip::Message
method_	include/header_field.h	/^		MethodMap method_;$/;"	m	struct:EasySip::RequestLine
method_	include/header_field.h	/^		std::string method_;$/;"	m	struct:EasySip::HFCSeq
mime_version_	include/header_field.h	/^		std::vector<HFMIMEVersion*> mime_version_;$/;"	m	struct:EasySip::HeaderFields
min_expires_	include/header_field.h	/^		std::vector<HFMinExpires*> min_expires_;$/;"	m	struct:EasySip::HeaderFields
min_se_	include/header_field.h	/^		std::vector<HFMinSE*> min_se_;$/;"	m	struct:EasySip::HeaderFields
msg_	include/except.h	/^		std::string msg_;$/;"	m	class:EasySip::Except
msg_	include/message.h	/^		std::string msg_; \/\/ message to send or received, which contains header fields and user data$/;"	m	class:EasySip::Message
msg_	include/socket.h	/^		std::string msg_;$/;"	m	class:EasySip::SocketIp4
n_	test/ts-shareptr.cpp	/^	int n_;$/;"	m	class:A	file:
name	include/header_field.h	/^		std::string& name()$/;"	f	struct:EasySip::HFFrom
name	include/header_field.h	/^		std::string& name()$/;"	f	struct:EasySip::HFTo
name	include/parameter.h	/^		std::string name() const$/;"	f	class:EasySip::CodeMap
name	include/parameter.h	/^		std::string name() const$/;"	f	class:EasySip::Parameter
name	include/parameter.h	/^		void name(const std::string n)$/;"	f	class:EasySip::Parameter
name	include/parameter.h	/^		void name(std::string n)$/;"	f	class:EasySip::CodeMap
name	include/uri.h	/^		std::string& name()$/;"	f	class:EasySip::Contact
name	include/uri.h	/^		void name(std::string name)$/;"	f	class:EasySip::Contact
need_bind_	include/socket.h	/^		bool need_bind_;$/;"	m	class:EasySip::SocketIp4UDP
networkInit	test/ts-osip.c	/^int networkInit()$/;"	f
networkMsgRecv	test/ts-osip.c	/^int networkMsgRecv(int sock,char *msgP,int msgLen,struct sockaddr_in *address)$/;"	f
networkMsgSend	test/ts-osip.c	/^int networkMsgSend(int sock,char *msgP,int msgLen,char *host,int port)$/;"	f
notify_request	src/Method/method.cpp	/^	int Method::notify_request()$/;"	f	class:EasySip::Method
on_ack_request	src/Method/method.cpp	/^	int Method::on_ack_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_bye_request	src/Method/method.cpp	/^	int Method::on_bye_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_cancel_request	src/Method/method.cpp	/^	int Method::on_cancel_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_info_request	src/Method/method.cpp	/^	int Method::on_info_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_invite_request	src/Method/method.cpp	/^	int Method::on_invite_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_message_request	src/Method/method.cpp	/^	int Method::on_message_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_notify_request	src/Method/method.cpp	/^	int Method::on_notify_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_options_request	src/Method/method.cpp	/^	int Method::on_options_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_prack_request	src/Method/method.cpp	/^	int Method::on_prack_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_receive_message	src/Method/method.cpp	/^	int Method::on_receive_message(std::string &msg)$/;"	f	class:EasySip::Method
on_receive_req	src/Method/method.cpp	/^	int Method::on_receive_req(std::string &msg, const int code)$/;"	f	class:EasySip::Method
on_receive_resp	src/Method/method.cpp	/^	int Method::on_receive_resp(std::string &msg, const int code)$/;"	f	class:EasySip::Method
on_refer_request	src/Method/method.cpp	/^	int Method::on_refer_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_register_request	src/Method/method.cpp	/^	int Method::on_register_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_register_request	src/Method/registar.cpp	/^	int Registar::on_register_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Registar
on_response	src/Method/method.cpp	/^	int Method::on_response(std::string &msg)$/;"	f	class:EasySip::Method
on_subscribe_request	src/Method/method.cpp	/^	int Method::on_subscribe_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
on_timeup	test/ts-thr-timer.cpp	/^void on_timeup()$/;"	f
on_update_request	src/Method/method.cpp	/^	int Method::on_update_request(RequestMessage &in_msg)$/;"	f	class:EasySip::Method
operator ()	include/header_field.h	/^		std::string operator() ()$/;"	f	struct:EasySip::RequestLine
operator ()	include/header_field.h	/^		std::string operator() ()$/;"	f	struct:EasySip::ResponseStatus
operator ()	include/parameter.h	/^		std::string operator() ()$/;"	f	class:EasySip::CodeMap
operator ()	include/parameter.h	/^		void operator() (CodeMap &cm)$/;"	f	class:EasySip::CodeMap
operator ()	src/header_field.cpp	/^	std::string HeaderField::operator() ()$/;"	f	class:EasySip::HeaderField
operator *	include/timer.h	/^		unsigned long operator* (unsigned long val)$/;"	f	class:EasySip::Timer
operator *	test/ts.cpp	/^	unsigned long operator* (unsigned long val)$/;"	f	class:A
operator <	include/parameter.h	/^		bool operator< (CodeMap cm)$/;"	f	class:EasySip::CodeMap
operator <	include/parameter.h	/^		friend bool operator< (Parameter a, Parameter b)$/;"	f	class:EasySip::Parameter
operator <<	include/header_field.h	/^			friend std::ostream& operator<< (std::ostream &o, AcceptRange &r)$/;"	f	struct:EasySip::HFAccept::AcceptRange
operator <<	include/header_field.h	/^			friend std::ostream& operator<< (std::ostream &o, WarningValue &w)$/;"	f	struct:EasySip::HFWarning::WarningValue
operator <<	include/header_field.h	/^		friend std::ostream& operator<< (std::ostream &o, RequestLine req)$/;"	f	struct:EasySip::RequestLine
operator <<	include/header_field.h	/^		friend std::ostream& operator<< (std::ostream &o, ResponseStatus res)$/;"	f	struct:EasySip::ResponseStatus
operator <<	include/parameter.h	/^		friend std::ostream& operator<< (std::ostream &o, CodeMap cm)$/;"	f	class:EasySip::CodeMap
operator <<	include/parameter.h	/^		friend std::ostream& operator<< (std::ostream &o, ItemWithParams &c)$/;"	f	struct:EasySip::ItemWithParams
operator <<	include/parameter.h	/^		friend std::ostream& operator<< (std::ostream &o, Parameter p)$/;"	f	class:EasySip::Parameter
operator <<	include/parameter.h	/^		friend std::ostream& operator<< (std::ostream &o, Parameters &ps)$/;"	f	class:EasySip::Parameters
operator <<	include/uri.h	/^		friend std::ostream& operator<< (std::ostream &o, Contact &c)$/;"	f	class:EasySip::Contact
operator <<	src/header_field.cpp	/^	std::ostream& operator<< (std::ostream& o, HeaderField &hf)$/;"	f	namespace:EasySip
operator <<	src/message.cpp	/^	std::ostream& operator<< (std::ostream& o, Message& msg)$/;"	f	namespace:EasySip
operator <<	test/ts.cpp	/^	friend std::ostream& operator<< (std::ostream &o, A a)$/;"	f	class:A
operator =	include/header_field.h	/^		ResponseStatus& operator=(ResponseStatus resp)$/;"	f	struct:EasySip::ResponseStatus
operator =	include/parameter.h	/^		CodeMap& operator= (CodeMap &cm)$/;"	f	class:EasySip::CodeMap
operator =	include/parameter.h	/^		CodeMap& operator= (const CodeMap &cm)$/;"	f	class:EasySip::CodeMap
operator =	test/ts.cpp	/^	A operator= (A a)$/;"	f	class:A
operator ==	include/parameter.h	/^		bool operator== (const CodeMap &cm)$/;"	f	class:EasySip::CodeMap
options_request	src/Method/method.cpp	/^	int Method::options_request()$/;"	f	class:EasySip::Method
opts_	include/header_field.h	/^		std::vector<std::string> opts_;$/;"	m	struct:EasySip::HFBase_3_
organization_	include/header_field.h	/^		std::vector<HFOrganization*> organization_;$/;"	m	struct:EasySip::HeaderFields
osip	test/ts-osip.c	/^osip_t *osip;$/;"	v
out_if_not_empty	include/header_field.h	1038;"	d
p_asserted_identity_	include/header_field.h	/^		std::vector<HFPAssertedIdentity*> p_asserted_identity_;$/;"	m	struct:EasySip::HeaderFields
p_osp_auth_token_	include/header_field.h	/^		std::vector<HFPOSPAuthToken*> p_osp_auth_token_;$/;"	m	struct:EasySip::HeaderFields
p_preferred_identity_	include/header_field.h	/^		std::vector<HFPPreferredIdentity*> p_preferred_identity_;$/;"	m	struct:EasySip::HeaderFields
params	include/parameter.h	/^		Parameters& params()$/;"	f	struct:EasySip::ItemWithParams
params_	include/parameter.h	/^		Parameters params_;$/;"	m	struct:EasySip::ItemWithParams
parse	include/message.h	/^		virtual void parse()$/;"	f	class:EasySip::RequestMessage
parse	include/message.h	/^		virtual void parse()$/;"	f	class:EasySip::ResponseMessage
parse	src/header_field.cpp	/^	void HFAccept::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAccept
parse	src/header_field.cpp	/^	void HFAcceptContact::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAcceptContact
parse	src/header_field.cpp	/^	void HFAcceptEncoding::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAcceptEncoding
parse	src/header_field.cpp	/^	void HFAlertInfo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAlertInfo
parse	src/header_field.cpp	/^	void HFAllowEvents::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAllowEvents
parse	src/header_field.cpp	/^	void HFAnswerMode::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAnswerMode
parse	src/header_field.cpp	/^	void HFAuthenticationInfo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAuthenticationInfo
parse	src/header_field.cpp	/^	void HFAuthorization::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFAuthorization
parse	src/header_field.cpp	/^	void HFBase_1_::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFBase_1_
parse	src/header_field.cpp	/^	void HFBase_2_::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFBase_2_
parse	src/header_field.cpp	/^	void HFBase_3_::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFBase_3_
parse	src/header_field.cpp	/^	void HFCSeq::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFCSeq
parse	src/header_field.cpp	/^	void HFCallId::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFCallId
parse	src/header_field.cpp	/^	void HFCallInfo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFCallInfo
parse	src/header_field.cpp	/^	void HFContentEncoding::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFContentEncoding
parse	src/header_field.cpp	/^	void HFContentLanguage::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFContentLanguage
parse	src/header_field.cpp	/^	void HFContentType::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFContentType
parse	src/header_field.cpp	/^	void HFDate::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFDate
parse	src/header_field.cpp	/^	void HFErrorInfo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFErrorInfo
parse	src/header_field.cpp	/^	void HFEvent::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFEvent
parse	src/header_field.cpp	/^	void HFInReplyTo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFInReplyTo
parse	src/header_field.cpp	/^	void HFJoin::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFJoin
parse	src/header_field.cpp	/^	void HFMIMEVersion::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFMIMEVersion
parse	src/header_field.cpp	/^	void HFMinSE::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFMinSE
parse	src/header_field.cpp	/^	void HFOrganization::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFOrganization
parse	src/header_field.cpp	/^	void HFPAssertedIdentity::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPAssertedIdentity
parse	src/header_field.cpp	/^	void HFPOSPAuthToken::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPOSPAuthToken
parse	src/header_field.cpp	/^	void HFPPreferredIdentity::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPPreferredIdentity
parse	src/header_field.cpp	/^	void HFPriority::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPriority
parse	src/header_field.cpp	/^	void HFPrivAnswerMode::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPrivAnswerMode
parse	src/header_field.cpp	/^	void HFPrivacy::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFPrivacy
parse	src/header_field.cpp	/^	void HFProxyAuthenticate::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFProxyAuthenticate
parse	src/header_field.cpp	/^	void HFProxyAuthorization::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFProxyAuthorization
parse	src/header_field.cpp	/^	void HFRSeq::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRSeq
parse	src/header_field.cpp	/^	void HFRack::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRack
parse	src/header_field.cpp	/^	void HFReason::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFReason
parse	src/header_field.cpp	/^	void HFRecordRoute::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRecordRoute
parse	src/header_field.cpp	/^	void HFReferTo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFReferTo
parse	src/header_field.cpp	/^	void HFReferredBy::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFReferredBy
parse	src/header_field.cpp	/^	void HFRejectContact::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRejectContact
parse	src/header_field.cpp	/^	void HFReplaces::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFReplaces
parse	src/header_field.cpp	/^	void HFReplyTo::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFReplyTo
parse	src/header_field.cpp	/^	void HFRequestDisposition::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRequestDisposition
parse	src/header_field.cpp	/^	void HFRetryAfter::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRetryAfter
parse	src/header_field.cpp	/^	void HFRoute::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFRoute
parse	src/header_field.cpp	/^	void HFSessionExpires::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFSessionExpires
parse	src/header_field.cpp	/^	void HFSubscriptionState::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFSubscriptionState
parse	src/header_field.cpp	/^	void HFTimestamp::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFTimestamp
parse	src/header_field.cpp	/^	void HFUnsupported::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFUnsupported
parse	src/header_field.cpp	/^	void HFUserAgent::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFUserAgent
parse	src/header_field.cpp	/^	void HFVia::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFVia
parse	src/header_field.cpp	/^	void HFWWWAuthenticate::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFWWWAuthenticate
parse	src/header_field.cpp	/^	void HFWarning::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::HFWarning
parse	src/header_field.cpp	/^	void RequestLine::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::RequestLine
parse	src/header_field.cpp	/^	void ResponseStatus::parse(std::string &msg, size_t &pos)$/;"	f	class:EasySip::ResponseStatus
parse	src/message.cpp	/^	void Message::parse(size_t &pos)$/;"	f	class:EasySip::Message
parse	src/message.cpp	/^	void RequestMessage::parse(size_t &pos)$/;"	f	class:EasySip::RequestMessage
parse	src/message.cpp	/^	void ResponseMessage::parse(size_t &pos)$/;"	f	class:EasySip::ResponseMessage
parse_dispatch	src/message.cpp	/^	void Message::parse_dispatch(std::string field, size_t &pos)$/;"	f	class:EasySip::Message
parse_field	include/message.h	72;"	d
prack_request	src/Method/method.cpp	/^	int Method::prack_request()$/;"	f	class:EasySip::Method
priority_	include/header_field.h	/^		std::vector<HFPriority*> priority_;$/;"	m	struct:EasySip::HeaderFields
priv_answer_mode_	include/header_field.h	/^		std::vector<HFPrivAnswerMode*> priv_answer_mode_;$/;"	m	struct:EasySip::HeaderFields
privacy_	include/header_field.h	/^		std::vector<HFPrivacy*> privacy_;$/;"	m	struct:EasySip::HeaderFields
processSipMsg	test/ts-osip.c	/^void processSipMsg()$/;"	f
proto_	include/socket.h	/^		int proto_;$/;"	m	class:EasySip::Socket
proxy_authenticate_	include/header_field.h	/^		std::vector<HFProxyAuthenticate*> proxy_authenticate_;$/;"	m	struct:EasySip::HeaderFields
proxy_authorization_	include/header_field.h	/^		std::vector<HFProxyAuthorization*> proxy_authorization_;$/;"	m	struct:EasySip::HeaderFields
proxy_require_	include/header_field.h	/^		std::vector<HFProxyRequire*> proxy_require_;$/;"	m	struct:EasySip::HeaderFields
rack_	include/header_field.h	/^		std::vector<HFRack*> rack_;$/;"	m	struct:EasySip::HeaderFields
ranges_	include/header_field.h	/^		std::vector<AcceptRange> ranges_;$/;"	m	struct:EasySip::HFAccept
reason_	include/header_field.h	/^		std::vector<HFReason*> reason_;$/;"	m	struct:EasySip::HeaderFields
record_route_	include/header_field.h	/^		std::vector<HFRecordRoute*> record_route_;$/;"	m	struct:EasySip::HeaderFields
recv	src/socket.cpp	/^	int SocketIp4UDP::recv(int selfloop)$/;"	f	class:EasySip::SocketIp4UDP
refer_request	src/Method/method.cpp	/^	int Method::refer_request()$/;"	f	class:EasySip::Method
refer_to_	include/header_field.h	/^		std::vector<HFReferTo*> refer_to_;$/;"	m	struct:EasySip::HeaderFields
referred_by_	include/header_field.h	/^		std::vector<HFReferredBy*> referred_by_;$/;"	m	struct:EasySip::HeaderFields
register_request	src/Method/method.cpp	/^	int Method::register_request()$/;"	f	class:EasySip::Method
reject_contact_	include/header_field.h	/^		std::vector<HFRejectContact*> reject_contact_;$/;"	m	struct:EasySip::HeaderFields
replaces_	include/header_field.h	/^		std::vector<HFReplaces*> replaces_;$/;"	m	struct:EasySip::HeaderFields
reply_to_	include/header_field.h	/^		std::vector<HFReplyTo*> reply_to_;$/;"	m	struct:EasySip::HeaderFields
req_line_	include/header_field.h	/^		std::shared_ptr<RequestLine> req_line_;$/;"	m	struct:EasySip::HeaderFields
request_disposition_	include/header_field.h	/^		std::vector<HFRequestDisposition*> request_disposition_;$/;"	m	struct:EasySip::HeaderFields
request_uri_	include/header_field.h	/^		std::string request_uri_;$/;"	m	struct:EasySip::RequestLine
require_	include/header_field.h	/^		std::vector<HFRequire*> require_;$/;"	m	struct:EasySip::HeaderFields
resp_code_	include/header_field.h	/^		RespCode resp_code_; \/\/ status_code_, reason_parase_$/;"	m	struct:EasySip::ResponseStatus
resp_status_	include/header_field.h	/^		std::shared_ptr<ResponseStatus> resp_status_;$/;"	m	struct:EasySip::HeaderFields
retry_after_	include/header_field.h	/^		std::vector<HFRetryAfter*> retry_after_; \/\/ in second$/;"	m	struct:EasySip::HeaderFields
return_false_if_true	include/header_field.h	26;"	d
route_	include/header_field.h	/^		std::vector<HFRoute*> route_;$/;"	m	struct:EasySip::HeaderFields
routine_	include/thread.h	/^		void* (*routine_) (void*);$/;"	m	class:EasySip::Thread
rseq_	include/header_field.h	/^		std::vector<HFRSeq*> rseq_;$/;"	m	struct:EasySip::HeaderFields
run_	include/Method/method.h	/^		bool run_;$/;"	m	class:EasySip::Method
self_addr_	include/socket.h	/^		std::string self_addr_;$/;"	m	class:EasySip::SocketIp4
self_sk_addr_	include/socket.h	/^		struct sockaddr_in self_sk_addr_;$/;"	m	class:EasySip::SocketIp4	typeref:struct:EasySip::SocketIp4::sockaddr_in
send	src/socket.cpp	/^	void SocketIp4UDP::send(const std::string msg)$/;"	f	class:EasySip::SocketIp4UDP
sent_by_	include/header_field.h	/^		std::string sent_by_;$/;"	m	struct:EasySip::HFVia
sent_proto_	include/header_field.h	/^		std::string sent_proto_;$/;"	m	struct:EasySip::HFVia
server_	include/header_field.h	/^		std::vector<HFServer*> server_;$/;"	m	struct:EasySip::HeaderFields
session_expires_	include/header_field.h	/^		std::vector<HFSessionExpires*> session_expires_; \/\/ in second$/;"	m	struct:EasySip::HeaderFields
setCallbacks	test/ts-osip.c	/^void setCallbacks(osip_t *osip)$/;"	f
set_param	include/parameter.h	/^		void set_param(std::string name, std::string value)$/;"	f	struct:EasySip::ItemWithParams
set_value_by_name	include/parameter.h	/^		void set_value_by_name(std::string name, std::string value)$/;"	f	class:EasySip::Parameters
show	test/ts.cpp	/^	void show()$/;"	f	class:A
sigev_notify_cb	test/ts-timer.cpp	/^void sigev_notify_cb(union sigval sv)$/;"	f
sigint_hdr	src/Method/method.cpp	/^	void Method::sigint_hdr(int signo)$/;"	f	class:EasySip::Method
sipSock	test/ts-osip.c	/^int sipSock;$/;"	v
sk_	include/socket.h	/^		int sk_;$/;"	m	class:EasySip::Socket
sk_addr_	include/socket.h	/^		struct sockaddr_in sk_addr_;$/;"	m	class:EasySip::SocketIp4	typeref:struct:EasySip::SocketIp4::sockaddr_in
split_by	src/message.cpp	/^	std::vector<std::string> Message::split_by(std::string msg, std::string sym)$/;"	f	class:EasySip::Message
start	src/Method/method.cpp	/^	int Method::start()$/;"	f	class:EasySip::Method
subject_	include/header_field.h	/^		std::vector<HFSubject*> subject_;$/;"	m	struct:EasySip::HeaderFields
subscribe_request	src/Method/method.cpp	/^	int Method::subscribe_request()$/;"	f	class:EasySip::Method
subscription_state_	include/header_field.h	/^		std::vector<HFSubscriptionState*> subscription_state_;$/;"	m	struct:EasySip::HeaderFields
subtype_	include/header_field.h	/^			std::string subtype_;$/;"	m	struct:EasySip::HFAccept::AcceptRange
supported_	include/header_field.h	/^		std::vector<HFSupported*> supported_;$/;"	m	struct:EasySip::HeaderFields
sv_udp_	include/Method/method.h	/^		SocketIp4UDP sv_udp_;$/;"	m	class:EasySip::Method
sym_	include/header_field.h	/^		char sym_;$/;"	m	struct:EasySip::HFBase_3_
sym_	include/parameter.h	/^		std::string sym_;$/;"	m	class:EasySip::Parameters
text_	include/header_field.h	/^			std::string text_;$/;"	m	struct:EasySip::HFWarning::WarningValue
time_string_to_ulong	include/timer.h	/^		static unsigned long time_string_to_ulong(std::string value)$/;"	f	class:EasySip::Timer
time_ulong_to_string	include/timer.h	/^		static unsigned long time_ulong_to_string(unsigned long value)$/;"	f	class:EasySip::Timer
timer	test/ts-thr-timer.h	/^void	timer(Dua const & d, Func const & f)$/;"	f
timestamp_	include/header_field.h	/^		std::vector<HFTimestamp*> timestamp_;$/;"	m	struct:EasySip::HeaderFields
to_	include/header_field.h	/^		std::vector<HFTo*> to_;$/;"	m	struct:EasySip::HeaderFields
type_	include/header_field.h	/^			std::string type_;$/;"	m	struct:EasySip::HFAccept::AcceptRange
type_	include/socket.h	/^		int type_;$/;"	m	class:EasySip::Socket
unsupported_	include/header_field.h	/^		std::vector<HFUnsupported*> unsupported_;$/;"	m	struct:EasySip::HeaderFields
update_request	src/Method/method.cpp	/^	int Method::update_request()$/;"	f	class:EasySip::Method
uri	include/header_field.h	/^		std::string& uri()$/;"	f	struct:EasySip::HFFrom
uri	include/header_field.h	/^		std::string& uri()$/;"	f	struct:EasySip::HFTo
uri	include/uri.h	/^		std::string& uri()$/;"	f	class:EasySip::Contact
uri	include/uri.h	/^		void uri(std::string uri)$/;"	f	class:EasySip::Contact
uri_binds_	include/Method/registar.h	/^		std::set<Contact> uri_binds_;$/;"	m	class:EasySip::Registar
user_agent_	include/header_field.h	/^		std::vector<HFUserAgent*> user_agent_;$/;"	m	struct:EasySip::HeaderFields
user_data_	include/message.h	/^		std::string user_data_;$/;"	m	class:EasySip::Message
value	include/parameter.h	/^		std::string value() const$/;"	f	class:EasySip::Parameter
value	include/parameter.h	/^		void value(const std::string v)$/;"	f	class:EasySip::Parameter
value	include/timer.h	/^		std::string value()$/;"	f	class:EasySip::Timer
value	include/timer.h	/^		void value(std::string value)$/;"	f	class:EasySip::TC_PROXY_INVITE_TIMEOUT
value	include/timer.h	/^		void value(std::string value)$/;"	f	class:EasySip::Timer
value	test/ts.cpp	/^	unsigned long value;$/;"	m	class:A	file:
value_	include/timer.h	/^		unsigned long value_; \/\/ in  ms$/;"	m	class:EasySip::Timer
values_	include/header_field.h	/^		std::string values_;$/;"	m	struct:EasySip::HeaderField
version_	include/header_field.h	/^		std::string version_;$/;"	m	struct:EasySip::RequestLine
version_	include/header_field.h	/^		std::string version_;$/;"	m	struct:EasySip::ResponseStatus
via_	include/header_field.h	/^		std::vector<HFVia*> via_;$/;"	m	struct:EasySip::HeaderFields
warn_vals_	include/header_field.h	/^		std::vector<WarningValue> warn_vals_;$/;"	m	struct:EasySip::HFWarning
warning_	include/header_field.h	/^		std::vector<HFWarning*> warning_;$/;"	m	struct:EasySip::HeaderFields
what	src/except.cpp	/^	const char* Except::what()$/;"	f	class:EasySip::Except
www_authenticate_	include/header_field.h	/^		std::vector<HFWWWAuthenticate*> www_authenticate_;$/;"	m	struct:EasySip::HeaderFields
~A	test/ts-shareptr.cpp	/^	~A()$/;"	f	class:A
~A	test/ts.cpp	/^	~A()$/;"	f	class:A
~AckMessage	include/message.h	/^		~AckMessage()$/;"	f	class:EasySip::AckMessage
~B	test/ts.cpp	/^	~B()$/;"	f	class:B
~ByeMessage	include/message.h	/^		~ByeMessage()$/;"	f	class:EasySip::ByeMessage
~CancelMessage	include/message.h	/^		~CancelMessage()$/;"	f	class:EasySip::CancelMessage
~HeaderField	include/header_field.h	/^		~HeaderField()$/;"	f	struct:EasySip::HeaderField
~HeaderFields	src/header_field.cpp	/^	HeaderFields::~HeaderFields()$/;"	f	class:EasySip::HeaderFields
~InfoMessage	include/message.h	/^		~InfoMessage()$/;"	f	class:EasySip::InfoMessage
~InviteMessage	include/message.h	/^		~InviteMessage()$/;"	f	class:EasySip::InviteMessage
~Message	include/message.h	/^		~Message()$/;"	f	class:EasySip::Message
~MessageMessage	include/message.h	/^		~MessageMessage()$/;"	f	class:EasySip::MessageMessage
~Method	src/Method/method.cpp	/^	Method::~Method()$/;"	f	class:EasySip::Method
~NotifyMessage	include/message.h	/^		~NotifyMessage()$/;"	f	class:EasySip::NotifyMessage
~OptionsMessage	include/message.h	/^		~OptionsMessage()$/;"	f	class:EasySip::OptionsMessage
~Parameter	include/parameter.h	/^		~Parameter()$/;"	f	class:EasySip::Parameter
~Parameters	include/parameter.h	/^		~Parameters()$/;"	f	class:EasySip::Parameters
~PrackMessage	include/message.h	/^		~PrackMessage()$/;"	f	class:EasySip::PrackMessage
~Proxy	include/Method/proxy.h	/^		~Proxy()$/;"	f	class:EasySip::Proxy
~ReferMessage	include/message.h	/^		~ReferMessage()$/;"	f	class:EasySip::ReferMessage
~Registar	include/Method/registar.h	/^		~Registar()$/;"	f	class:EasySip::Registar
~RegisterMessage	include/message.h	/^		~RegisterMessage()$/;"	f	class:EasySip::RegisterMessage
~ResponseMessage	include/message.h	/^		~ResponseMessage()$/;"	f	class:EasySip::ResponseMessage
~Socket	include/socket.h	/^		~Socket()$/;"	f	class:EasySip::Socket
~SocketIp4	include/socket.h	/^		~SocketIp4()$/;"	f	class:EasySip::SocketIp4
~SocketIp4UDP	src/socket.cpp	/^	SocketIp4UDP::~SocketIp4UDP()$/;"	f	class:EasySip::SocketIp4UDP
~SubscribeMessage	include/message.h	/^		~SubscribeMessage()$/;"	f	class:EasySip::SubscribeMessage
~T1_RTT	include/timer.h	/^		~T1_RTT()$/;"	f	class:EasySip::T1_Rtt
~T2_MAX_RETRAN_INTV	include/timer.h	/^		~T2_MAX_RETRAN_INTV()$/;"	f	class:EasySip::T2_MAX_RETRAN_INTV
~T4_MAX_DURATION_OF_MSG	include/timer.h	/^		~T4_MAX_DURATION_OF_MSG()$/;"	f	class:EasySip::T4_MAX_DURATION_OF_MSG
~TA_INVITE_RETRAN_INTERVAL	include/timer.h	/^		~TA_INVITE_RETRAN_INTERVAL()$/;"	f	class:EasySip::TA_INVITE_RETRAN_INTERVAL
~TB_INVITE_TIMEOUT	include/timer.h	/^		~TB_INVITE_TIMEOUT()$/;"	f	class:EasySip::TB_INVITE_TIMEOUT
~TC_PROXY_INVITE_TIMEOUT	include/timer.h	/^		~TC_PROXY_INVITE_TIMEOUT()$/;"	f	class:EasySip::TC_PROXY_INVITE_TIMEOUT
~TD_WAIT_FOR_RETRAN	include/timer.h	/^		~TD_WAIT_FOR_RETRAN()$/;"	f	class:EasySip::TD_WAIT_FOR_RETRAN
~TE_NON_INVITE_RETRAN_INTV	include/timer.h	/^		~TE_NON_INVITE_RETRAN_INTV()$/;"	f	class:EasySip::TE_NON_INVITE_RETRAN_INTV
~TF_NON_INVITE_REQS_TIMEOUT	include/timer.h	/^		~TF_NON_INVITE_REQS_TIMEOUT()$/;"	f	class:EasySip::TF_NON_INVITE_REQS_TIMEOUT
~TG_INVITE_RESP_RETRAN_INTV	include/timer.h	/^		~TG_INVITE_RESP_RETRAN_INTV()$/;"	f	class:EasySip::TG_INVITE_RESP_RETRAN_INTV
~TH_WAIT_FOR_ACK_RECEIPT	include/timer.h	/^		~TH_WAIT_FOR_ACK_RECEIPT()$/;"	f	class:EasySip::TH_WAIT_FOR_ACK_RECEIPT
~TI_WAIT_FOR_ACK_RETRAN	include/timer.h	/^		~TI_WAIT_FOR_ACK_RETRAN()$/;"	f	class:EasySip::TI_WAIT_FOR_ACK_RETRAN
~TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN	include/timer.h	/^		~TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN()$/;"	f	class:EasySip::TJ_WAIT_FOR_NON_INVITE_REQS_RETRAN
~TK_WAIT_FOR_RESP_RETRAN	include/timer.h	/^		~TK_WAIT_FOR_RESP_RETRAN()$/;"	f	class:EasySip::TK_WAIT_FOR_RESP_RETRAN
~Thread	src/thread.cpp	/^	Thread::~Thread()$/;"	f	class:EasySip::Thread
~Timer	include/timer.h	/^		~Timer()$/;"	f	class:EasySip::Timer
~UAClient	include/Method/uaclient.h	/^		~UAClient()$/;"	f	class:EasySip::UAClient
~UAServer	include/Method/uaserver.h	/^		~UAServer()$/;"	f	class:EasySip::UAServer
~UpdateMessage	include/message.h	/^		~UpdateMessage()$/;"	f	class:EasySip::UpdateMessage
